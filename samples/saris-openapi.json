{
  "openapi": "3.1.0",
  "info": {
    "title": "Saris API",
    "version": "0.1.0"
  },
  "paths": {
    "/api/token": {
      "put": {
        "tags": ["auth"],
        "summary": "Upgrade Token",
        "description": "For user accounts with MFA, performs the MFA challenge and (if successful) upgrades the user token to one that\ncontains the full session. Uses the previously issued partial token to authenticate. This endpoint is only\navailable for normal users, not API users.\n\nArgs:\n    TokenUpgradeBodySchema\n\nReturns:\n    TokenSchema: the new, upgraded token, in JWT format following the OAuth2 specification\n\nNote: the response of this endpoint follows the OAuth2 specification, and therefore is not in the standard Saris\nAPI response format.",
        "operationId": "upgrade_token_api_token_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenUpgradeBodySchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["auth"],
        "summary": "Create Token",
        "description": "Creates a token to be used to authenticate and authorize the user for other API endpoints. Effectively logs the\nuser in. The user account credentials are provided via OAuth2's username and password fields.\n\nFor API users, a special type of token is created, with the API key embedded in it, and has a long expiration time,\neffecitvely lasting forever. API users cannot have MFA enabled.\n\nFor normal users:\n\n    If the user account does not have MFA enabled:\n        On successful email/password authentication, a full-type access token will be issued. The access token is\n        used to authenticate the user for other API endpoints.\n\n    If the user account has MFA enabled:\n        On successful email/password authentication, only a partial-type access token will be issued. This token\n        will have a short expiration time, during which the user must complete the MFA challenge to upgrade the\n        token to a full-type access token (using the PUT /token endpoint).\n\nNote: the response of this endpoint follows the OAuth2 specification, and therefore is not in the standard Saris\nAPI response format.\n\nArgs:\n    None\n\nReturns:\n    TokenSchema: the token created, in JWT format following the OAuth2 specification",
        "operationId": "create_token_api_token_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_token_api_token_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/token/logout": {
      "post": {
        "tags": ["auth"],
        "summary": "Logout",
        "description": "Logs out the user by deactivating their current token. This endpoint has no effect on API users.\n\nArgs:\n    None\n\nReturns:\n    SarisAPIResponse: A success response indicating the user has been logged out",
        "operationId": "logout_api_token_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/mfa-device": {
      "post": {
        "tags": ["auth"],
        "summary": "Register Mfa Device",
        "description": "Initiates the set up of a new MFA device for the user. The MFA device will need to be activated before it can be\nused.\n\nA user can have at most one active MFA device:\n    - Attempting to create a new MFA device while an existing MFA device is active will result in a 409 Conflict\n      error\n    - Attempting to create a new MFA device while an existing MFA device is pending will result in the existing\n      pending MFA device being deleted and a new one being created\n\nArgs:\n    device_identifier: The identifier of the MFA device\n\nReturns:\n    ResponseSchema: the provisioning URI for the MFA device",
        "operationId": "register_mfa_device_api_mfa_device_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "device_identifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the MFA device",
              "title": "Device Identifier"
            },
            "description": "The identifier of the MFA device"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_MFASetupResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/mfa-device/activate/{device_identifier}": {
      "put": {
        "tags": ["auth"],
        "summary": "Activate Mfa Device",
        "description": "Tests then activates a pending MFA device. Successfully activating the MFA device will deactivate the current\naccess token of the user, so the user will need to login again.\n\nArgs:\n    device_identifier: The identifier of the pending MFA device to activate\n    mfa_challenge: The MFA challenge code to verify the MFA device\n\nReturns:\n    ResponseSchema: the activated MFA device",
        "operationId": "activate_mfa_device_api_mfa_device_activate__device_identifier__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "device_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the pending MFA device to activate",
              "title": "Device Identifier"
            },
            "description": "The identifier of the pending MFA device to activate"
          },
          {
            "name": "mfa_challenge",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The MFA challenge code to verify the MFA device",
              "title": "Mfa Challenge"
            },
            "description": "The MFA challenge code to verify the MFA device"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_MFAActivateResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/app_validation_token": {
      "post": {
        "tags": ["auth"],
        "summary": "Create App Validation Token",
        "description": "Creates an application validation token to be used to validate the connection between the desktop application and\nany other add-in or extension components. It is effectively a short-lived JWT token.\n\nArgs:\n    None\n\nReturns:\n    AppValidationTokenSchema: contains the application validation token created",
        "operationId": "create_app_validation_token_api_app_validation_token_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_Union_AppValidationTokenSchema__Sequence_AppValidationTokenSchema___PaginationMetaSchema_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/app_validation_token/validate": {
      "get": {
        "tags": ["auth"],
        "summary": "Validate App Validation Token",
        "description": "Validates the application validation token.\n\nArgs:\n    None\n\nReturns:\n    None (will be 200 OK if the validation is successful, 401 Forbidden if the validation fails)",
        "operationId": "validate_app_validation_token_api_app_validation_token_validate_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_NoneType_PaginationMetaSchema_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/customers": {
      "get": {
        "tags": ["customers"],
        "summary": "Get Customers",
        "description": "Retrieves customers.\n\nArgs:\n    None\n\nReturns:\n    ResponseSchema: the customer(s) retrieved",
        "operationId": "get_customers_api_customers_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_Union_CustomerSchema__Sequence_CustomerSchema___PaginationMetaSchema_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/hc": {
      "get": {
        "tags": ["ops"],
        "summary": "Health Check",
        "description": "Health check for the API\n\nArgs:\n    None\n\nReturns:\n    ResponseSchema: the health check result",
        "operationId": "health_check_api_hc_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_HealthCheckResult_PaginationMetaSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "post": {
        "tags": ["users"],
        "summary": "Invite User",
        "description": "Register new user.",
        "operationId": "invite_user_api_users_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateUserSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_UserResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["users"],
        "summary": "Get Users",
        "description": "Retrieves users.\n\nArgs:\n    None\n\nReturns:\n    ResponseSchema: the user(s) retrieved",
        "operationId": "get_users_api_users_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UserType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The type of the user",
              "title": "User Type"
            },
            "description": "The type of the user"
          },
          {
            "name": "include_access_levels",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessLevel"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "The access levels of the user to include",
              "title": "Include Access Levels"
            },
            "description": "The access levels of the user to include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_Union_UserResponseSchema__Sequence_UserResponseSchema___PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/self": {
      "get": {
        "tags": ["users"],
        "summary": "Get Self",
        "description": "Retrieves self.\n\nArgs:\n    None\n\nReturns:\n    ResponseSchema: the user retrieved",
        "operationId": "get_self_api_users_self_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_SelfUserResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Self Update User",
        "description": "Update user's information for logged in user.",
        "operationId": "self_update_user_api_users_self_put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "mfa_challenge",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The challenge response to the MFA challenge",
              "title": "Mfa Challenge"
            },
            "description": "The challenge response to the MFA challenge"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelfUpdateUserSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_UserResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/self/verify": {
      "put": {
        "tags": ["users"],
        "summary": "Self Verify User",
        "description": "Verifies Newly Registered User.",
        "operationId": "self_verify_user_api_users_self_verify_put",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The email of the user to verify",
              "title": "Email"
            },
            "description": "The email of the user to verify"
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The token to verify",
              "title": "Token"
            },
            "description": "The token to verify"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_UserResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{user_id}": {
      "put": {
        "tags": ["users"],
        "summary": "Update User",
        "description": "Updates User Status to Active.",
        "operationId": "update_user_api_users__user_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The id of the user to update",
              "title": "User Id"
            },
            "description": "The id of the user to update"
          },
          {
            "name": "unlock_user",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to unlock the user",
              "default": false,
              "title": "Unlock User"
            },
            "description": "Whether to unlock the user"
          },
          {
            "name": "access_level",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AccessLevel"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The access level of the user",
              "title": "Access Level"
            },
            "description": "The access level of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_UserResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/reset-password": {
      "post": {
        "tags": ["users"],
        "summary": "Reset Password",
        "description": "Reset user's password.",
        "operationId": "reset_password_api_users_reset_password_post",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The email of the user to reset password",
              "title": "Email"
            },
            "description": "The email of the user to reset password"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_UserResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/set-password": {
      "put": {
        "tags": ["users"],
        "summary": "Set Password",
        "description": "Set user's password.",
        "operationId": "set_password_api_users_set_password_put",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The email of the user to set password",
              "title": "Email"
            },
            "description": "The email of the user to set password"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPasswordWithTokenSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_UserResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/ml_models": {
      "get": {
        "tags": ["ml_models"],
        "summary": "List Ml Models",
        "description": "List all available ML models that are enabled",
        "operationId": "list_ml_models_api_ml_models_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_Sequence_MLFoundationModelSchema__PaginationMetaSchema_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/ml_models/{model_id}": {
      "get": {
        "tags": ["ml_models"],
        "summary": "Get Model By Id",
        "description": "Retrieve model information by ID",
        "operationId": "get_model_by_id_api_ml_models__model_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Model Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_MLFoundationModelSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/ml_models/{model_id}/generate": {
      "post": {
        "tags": ["ml_models"],
        "summary": "Generate Response",
        "description": "Generate a LLM response using the specified model ID",
        "operationId": "generate_response_api_ml_models__model_id__generate_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Model Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SarisLLMInferenceRequestSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_SarisLLMInferenceResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/files": {
      "post": {
        "tags": ["files"],
        "summary": "Create File Metadata",
        "description": "Create a file metadata object in the database, to track the uploaded file.",
        "operationId": "create_file_metadata_api_files_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFileMetadataRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_FileMetadataResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/files/presign-get-urls": {
      "post": {
        "tags": ["files"],
        "summary": "Create Get Urls",
        "description": "Create pre-signed URLs for the given list of files.\n\nThis endpoint generates pre-signed URLs for retrieving files from a S3 bucket. Each file\nin the request will have its own unique URL and required fields.",
        "operationId": "create_get_urls_api_files_presign_get_urls_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateSignedUrlRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_GenerateSignedUrlResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/files/presign-post-urls": {
      "post": {
        "tags": ["files"],
        "summary": "Create Upload Urls",
        "description": "Create pre-signed upload URLs for the given list of files.\n\nThis endpoint generates pre-signed URLs for uploading files to an S3 bucket. Each file\nin the request will have its own unique URL and required fields for uploading.",
        "operationId": "create_upload_urls_api_files_presign_post_urls_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateUploadUrlRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_GenerateUploadUrlResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/documents/preprocess": {
      "post": {
        "tags": ["documents"],
        "summary": "Preprocess",
        "operationId": "preprocess_api_documents_preprocess_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Request Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_DocumentPreprocessResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/documents/signature-extract": {
      "post": {
        "tags": ["documents"],
        "summary": "Signature Extract",
        "operationId": "signature_extract_api_documents_signature_extract_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignatureExtractRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_SignatureExtractResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/documents/id-extract": {
      "post": {
        "tags": ["documents"],
        "summary": "Id Extract",
        "operationId": "id_extract_api_documents_id_extract_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IDExtractRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_IDExtractResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/workflows": {
      "post": {
        "tags": ["workflows"],
        "summary": "Create Workflow",
        "description": "Creates a new workflow.",
        "operationId": "create_workflow_api_workflows_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowCreateRequestSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_Union_WorkflowResponseSchema__Sequence_WorkflowResponseSchema___PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["workflows"],
        "summary": "Get Workflows",
        "description": "Retrieves the list of available workflows.",
        "operationId": "get_workflows_api_workflows_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "entry_point",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Type"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The entry point of the workflow, 1: USER_INPUT, 2: EMAIL, 3: WEB, 4: OUTLOOK, 5: DESKTOP_APP",
              "title": "Entry Point"
            },
            "description": "The entry point of the workflow, 1: USER_INPUT, 2: EMAIL, 3: WEB, 4: OUTLOOK, 5: DESKTOP_APP"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Status"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The status of the workflow, 1: DRAFT, 2: ENABLED",
              "title": "Status"
            },
            "description": "The status of the workflow, 1: DRAFT, 2: ENABLED"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum number of items to return after/before a specific cursor position.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of items to return after/before a specific cursor position."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9_:,+\\-\\s]*$"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort fields (e.g., 'id:asc' or 'id:desc' or '-id' or '+id')",
              "title": "Sort"
            },
            "description": "Sort fields (e.g., 'id:asc' or 'id:desc' or '-id' or '+id')"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor pointing to the item after which to start",
              "title": "After"
            },
            "description": "Cursor pointing to the item after which to start"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor pointing to the item before which to start",
              "title": "Before"
            },
            "description": "Cursor pointing to the item before which to start"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_Union_WorkflowResponseSchema__Sequence_WorkflowResponseSchema___PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/workflows/ui-location": {
      "get": {
        "tags": ["workflows"],
        "summary": "Get Ui Locations",
        "description": "Retrieves UI Locations for metadata extraction.",
        "operationId": "get_ui_locations_api_workflows_ui_location_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Type"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The type of the workflow task context, 1: USER_INPUT, 2: EMAIL, 3: WEB, 4: OUTLOOK, 5: DESKTOP_APP",
              "title": "Type"
            },
            "description": "The type of the workflow task context, 1: USER_INPUT, 2: EMAIL, 3: WEB, 4: OUTLOOK, 5: DESKTOP_APP"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_Union_UILocationResponseSchema__Sequence_UILocationResponseSchema___PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/workflows/ui-location/{ui_location_id}/extract": {
      "post": {
        "tags": ["workflows"],
        "summary": "Extract Metadata",
        "description": "Extracts metadata tags from DOM of the UI location.",
        "operationId": "extract_metadata_api_workflows_ui_location__ui_location_id__extract_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "ui_location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the UI location",
              "title": "Ui Location Id"
            },
            "description": "The ID of the UI location"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataExtractRequestSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_List_MetadataTag__PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/workflows/{workflow_id}": {
      "put": {
        "tags": ["workflows"],
        "summary": "Update Workflow",
        "description": "Updates a workflow.",
        "operationId": "update_workflow_api_workflows__workflow_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the workflow",
              "title": "Workflow Id"
            },
            "description": "The ID of the workflow"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowUpdateRequestSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_Union_WorkflowResponseSchema__Sequence_WorkflowResponseSchema___PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/workflows/{workflow_id}/promote": {
      "patch": {
        "tags": ["workflows"],
        "summary": "Promote Workflow",
        "description": "Promotes a workflow to enabled status and demotes other workflows with the same name.",
        "operationId": "promote_workflow_api_workflows__workflow_id__promote_patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the workflow to promote",
              "title": "Workflow Id"
            },
            "description": "The ID of the workflow to promote"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_Union_WorkflowResponseSchema__Sequence_WorkflowResponseSchema___PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/wf_tasks": {
      "post": {
        "tags": ["workflows"],
        "summary": "Create Wf Task",
        "description": "Creates a new workflow task.",
        "operationId": "create_wf_task_api_wf_tasks_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WFTaskCreateRequestSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_WFTaskResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["workflows"],
        "summary": "Get Wf Tasks",
        "description": "Retrieves a workflow task.",
        "operationId": "get_wf_tasks_api_wf_tasks_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workflow_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the workflow",
              "title": "Workflow Id"
            },
            "description": "The ID of the workflow"
          },
          {
            "name": "workflow_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The name of the workflow",
              "title": "Workflow Name"
            },
            "description": "The name of the workflow"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WFExecStatus"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "The status of workflow task, -1: FAILED, 0: RUNNING, 1: COMPLETED, 2: PENDING, 3: PAUSED, 4: CANCELLED i.e. [-1,0,1,2,3,4]",
              "title": "Status"
            },
            "description": "The status of workflow task, -1: FAILED, 0: RUNNING, 1: COMPLETED, 2: PENDING, 3: PAUSED, 4: CANCELLED i.e. [-1,0,1,2,3,4]"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the user",
              "title": "User Id"
            },
            "description": "The ID of the user"
          },
          {
            "name": "metadata_filters",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The metadata tags to filter the workflow tasks, in the format of 'key1:value1,key2:value2'",
              "title": "Metadata Filters"
            },
            "description": "The metadata tags to filter the workflow tasks, in the format of 'key1:value1,key2:value2'"
          },
          {
            "name": "filter_condition",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The filter condition to select workflow tasks i.e. AND, OR",
              "default": "AND",
              "title": "Filter Condition"
            },
            "description": "The filter condition to select workflow tasks i.e. AND, OR"
          },
          {
            "name": "with_metadata",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include metadata in the response",
              "default": false,
              "title": "With Metadata"
            },
            "description": "Include metadata in the response"
          },
          {
            "name": "with_results",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include results in the response",
              "default": false,
              "title": "With Results"
            },
            "description": "Include results in the response"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum number of items to return after/before a specific cursor position.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of items to return after/before a specific cursor position."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9_:,+\\-\\s]*$"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort fields (e.g., 'id:asc' or 'id:desc' or '-id' or '+id')",
              "title": "Sort"
            },
            "description": "Sort fields (e.g., 'id:asc' or 'id:desc' or '-id' or '+id')"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor pointing to the item after which to start",
              "title": "After"
            },
            "description": "Cursor pointing to the item after which to start"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor pointing to the item before which to start",
              "title": "Before"
            },
            "description": "Cursor pointing to the item before which to start"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_Union_WFTaskResponseSchema__Sequence_WFTaskResponseSchema___PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/wf_tasks/{wf_task_id}": {
      "get": {
        "tags": ["workflows"],
        "summary": "Get Wf Task By Id",
        "description": "Retrieves a single workflow task by its ID.",
        "operationId": "get_wf_task_by_id_api_wf_tasks__wf_task_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "wf_task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the workflow task",
              "title": "Wf Task Id"
            },
            "description": "The ID of the workflow task"
          },
          {
            "name": "with_metadata",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include metadata in the response",
              "default": false,
              "title": "With Metadata"
            },
            "description": "Include metadata in the response"
          },
          {
            "name": "with_results",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include results in the response",
              "default": false,
              "title": "With Results"
            },
            "description": "Include results in the response"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_WFTaskResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["workflows"],
        "summary": "Update Wf Task",
        "description": "Updates a workflow task.",
        "operationId": "update_wf_task_api_wf_tasks__wf_task_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "wf_task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the workflow task",
              "title": "Wf Task Id"
            },
            "description": "The ID of the workflow task"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WFTaskUpdateRequestSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_WFTaskResponseSchema_PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/wf_tasks/{wf_task_id}/results": {
      "get": {
        "tags": ["workflows"],
        "summary": "Get Wf Task Results",
        "description": "Retrieves the results of a workflow task, contained in a File Metadata object.\nThe File Metadata object is created by the workflow task when it is completed.",
        "operationId": "get_wf_task_results_api_wf_tasks__wf_task_id__results_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "wf_task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the workflow task",
              "title": "Wf Task Id"
            },
            "description": "The ID of the workflow task"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum number of items to return after/before a specific cursor position.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of items to return after/before a specific cursor position."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9_:,+\\-\\s]*$"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort fields (e.g., 'id:asc' or 'id:desc' or '-id' or '+id')",
              "title": "Sort"
            },
            "description": "Sort fields (e.g., 'id:asc' or 'id:desc' or '-id' or '+id')"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor pointing to the item after which to start",
              "title": "After"
            },
            "description": "Cursor pointing to the item after which to start"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor pointing to the item before which to start",
              "title": "Before"
            },
            "description": "Cursor pointing to the item before which to start"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_Union_WFTaskResultsResponseSchema__Sequence_WFTaskResultsResponseSchema___PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/wf_tasks/{wf_task_id}/metadata": {
      "put": {
        "tags": ["workflows"],
        "summary": "Update Wf Task Metadata",
        "description": "Updates a workflow task's metadata, updating existing keys and creating new ones.",
        "operationId": "update_wf_task_metadata_api_wf_tasks__wf_task_id__metadata_put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "wf_task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the workflow task",
              "title": "Wf Task Id"
            },
            "description": "The ID of the workflow task"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WFTaskMetadataUpdateRequestSchema"
                },
                "title": "Wf Task Metadata Update Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_Sequence_WFTaskMetadataResponseSchema__PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/wf_tasks/start": {
      "post": {
        "tags": ["workflows"],
        "summary": "Start Wf Tasks",
        "description": "Starts multiple workflow tasks in the backend runtime.\n\nThis endpoint validates that each workflow exists and has runtime_location = 'backend',\ncreates new tasks with PENDING status, and adds them to the Redis stream for processing.",
        "operationId": "start_wf_tasks_api_wf_tasks_start_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WFTaskBatchStartRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema_List_WFTaskResponseSchema__PaginationMetaSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AccessLevel": {
        "type": "integer",
        "enum": [-1, 0, 1, 2, 3, 99],
        "title": "AccessLevel"
      },
      "ActionClick": {
        "properties": {
          "button": {
            "type": "string",
            "enum": ["left", "right", "wheel", "back", "forward"],
            "title": "Button"
          },
          "type": {
            "type": "string",
            "const": "click",
            "title": "Type"
          },
          "x": {
            "type": "integer",
            "title": "X"
          },
          "y": {
            "type": "integer",
            "title": "Y"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["button", "type", "x", "y"],
        "title": "ActionClick"
      },
      "ActionDoubleClick": {
        "properties": {
          "type": {
            "type": "string",
            "const": "double_click",
            "title": "Type"
          },
          "x": {
            "type": "integer",
            "title": "X"
          },
          "y": {
            "type": "integer",
            "title": "Y"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["type", "x", "y"],
        "title": "ActionDoubleClick"
      },
      "ActionDrag": {
        "properties": {
          "path": {
            "items": {
              "$ref": "#/components/schemas/ActionDragPath"
            },
            "type": "array",
            "title": "Path"
          },
          "type": {
            "type": "string",
            "const": "drag",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["path", "type"],
        "title": "ActionDrag"
      },
      "ActionDragPath": {
        "properties": {
          "x": {
            "type": "integer",
            "title": "X"
          },
          "y": {
            "type": "integer",
            "title": "Y"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["x", "y"],
        "title": "ActionDragPath"
      },
      "ActionFind": {
        "properties": {
          "pattern": {
            "type": "string",
            "title": "Pattern"
          },
          "type": {
            "type": "string",
            "const": "find",
            "title": "Type"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["pattern", "type", "url"],
        "title": "ActionFind"
      },
      "ActionKeypress": {
        "properties": {
          "keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Keys"
          },
          "type": {
            "type": "string",
            "const": "keypress",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["keys", "type"],
        "title": "ActionKeypress"
      },
      "ActionMove": {
        "properties": {
          "type": {
            "type": "string",
            "const": "move",
            "title": "Type"
          },
          "x": {
            "type": "integer",
            "title": "X"
          },
          "y": {
            "type": "integer",
            "title": "Y"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["type", "x", "y"],
        "title": "ActionMove"
      },
      "ActionOpenPage": {
        "properties": {
          "type": {
            "type": "string",
            "const": "open_page",
            "title": "Type"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["type", "url"],
        "title": "ActionOpenPage"
      },
      "ActionScreenshot": {
        "properties": {
          "type": {
            "type": "string",
            "const": "screenshot",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["type"],
        "title": "ActionScreenshot"
      },
      "ActionScroll": {
        "properties": {
          "scroll_x": {
            "type": "integer",
            "title": "Scroll X"
          },
          "scroll_y": {
            "type": "integer",
            "title": "Scroll Y"
          },
          "type": {
            "type": "string",
            "const": "scroll",
            "title": "Type"
          },
          "x": {
            "type": "integer",
            "title": "X"
          },
          "y": {
            "type": "integer",
            "title": "Y"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["scroll_x", "scroll_y", "type", "x", "y"],
        "title": "ActionScroll"
      },
      "ActionSearch": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query"
          },
          "type": {
            "type": "string",
            "const": "search",
            "title": "Type"
          },
          "sources": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ActionSearchSource"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sources"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["query", "type"],
        "title": "ActionSearch"
      },
      "ActionSearchSource": {
        "properties": {
          "type": {
            "type": "string",
            "const": "url",
            "title": "Type"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["type", "url"],
        "title": "ActionSearchSource"
      },
      "ActionType": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "type": {
            "type": "string",
            "const": "type",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["text", "type"],
        "title": "ActionType"
      },
      "ActionWait": {
        "properties": {
          "type": {
            "type": "string",
            "const": "wait",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["type"],
        "title": "ActionWait"
      },
      "AdminCreateUserSchema": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email",
            "description": "The email of the user",
            "example": "john@example.com"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the user",
            "example": "John Doe"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "The password of the user",
            "example": "password"
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number",
            "description": "The phone number of the user",
            "example": "1234567890"
          }
        },
        "type": "object",
        "required": ["email", "name", "password"],
        "title": "AdminCreateUserSchema"
      },
      "AnnotationContainerFileCitation": {
        "properties": {
          "container_id": {
            "type": "string",
            "title": "Container Id"
          },
          "end_index": {
            "type": "integer",
            "title": "End Index"
          },
          "file_id": {
            "type": "string",
            "title": "File Id"
          },
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "start_index": {
            "type": "integer",
            "title": "Start Index"
          },
          "type": {
            "type": "string",
            "const": "container_file_citation",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["container_id", "end_index", "file_id", "filename", "start_index", "type"],
        "title": "AnnotationContainerFileCitation"
      },
      "AnnotationFileCitation": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id"
          },
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "index": {
            "type": "integer",
            "title": "Index"
          },
          "type": {
            "type": "string",
            "const": "file_citation",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["file_id", "filename", "index", "type"],
        "title": "AnnotationFileCitation"
      },
      "AnnotationFilePath": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id"
          },
          "index": {
            "type": "integer",
            "title": "Index"
          },
          "type": {
            "type": "string",
            "const": "file_path",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["file_id", "index", "type"],
        "title": "AnnotationFilePath"
      },
      "AnnotationURLCitation": {
        "properties": {
          "end_index": {
            "type": "integer",
            "title": "End Index"
          },
          "start_index": {
            "type": "integer",
            "title": "Start Index"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "type": {
            "type": "string",
            "const": "url_citation",
            "title": "Type"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["end_index", "start_index", "title", "type", "url"],
        "title": "AnnotationURLCitation"
      },
      "AppValidationTokenSchema": {
        "properties": {
          "app_validation_token": {
            "type": "string",
            "title": "App Validation Token",
            "description": "The application validation token in JWT format, containing the following claims: iss (the issuer), sub (the user ID), exp (the expiration time), and iat (the issued at time)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzd..."
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "description": "The type of token (only Bearer is supported)",
            "example": "bearer"
          }
        },
        "type": "object",
        "required": ["app_validation_token", "token_type"],
        "title": "AppValidationTokenSchema",
        "description": "The API return schema for application validation tokens. Contains the JWT encoded token."
      },
      "Body_create_token_api_token_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "format": "password",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "format": "password",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": ["username", "password"],
        "title": "Body_create_token_api_token_post"
      },
      "ComparisonFilter": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "type": {
            "type": "string",
            "enum": ["eq", "ne", "gt", "gte", "lt", "lte"],
            "title": "Type"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "Value"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["key", "type", "value"],
        "title": "ComparisonFilter"
      },
      "CompoundFilter": {
        "properties": {
          "filters": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ComparisonFilter"
                },
                {}
              ]
            },
            "type": "array",
            "title": "Filters"
          },
          "type": {
            "type": "string",
            "enum": ["and", "or"],
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["filters", "type"],
        "title": "CompoundFilter"
      },
      "ComputerTool": {
        "properties": {
          "display_height": {
            "type": "integer",
            "title": "Display Height"
          },
          "display_width": {
            "type": "integer",
            "title": "Display Width"
          },
          "environment": {
            "type": "string",
            "enum": ["windows", "mac", "linux", "ubuntu", "browser"],
            "title": "Environment"
          },
          "type": {
            "type": "string",
            "const": "computer_use_preview",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["display_height", "display_width", "environment", "type"],
        "title": "ComputerTool"
      },
      "ComputerToolCall": {
        "properties": {
          "type": {
            "type": "string",
            "const": "computer_call",
            "title": "Type",
            "default": "computer_call"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "ID of the content block"
          },
          "status": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["in_progress", "completed", "incomplete", "failed", "searching"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "Status of the content block"
          },
          "action": {
            "additionalProperties": true,
            "type": "object",
            "title": "Action",
            "description": "Action of the computer tool"
          },
          "call_id": {
            "type": "string",
            "title": "Call Id",
            "description": "ID of the computer tool call"
          },
          "pending_safety_checks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pending Safety Checks",
            "description": "Pending safety checks"
          }
        },
        "type": "object",
        "required": ["id", "status", "action", "call_id"],
        "title": "ComputerToolCall",
        "description": "Computer tool call output"
      },
      "Content": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "type": {
            "type": "string",
            "const": "reasoning_text",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["text", "type"],
        "title": "Content"
      },
      "CreateFileMetadataRequestSchema": {
        "properties": {
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "Name of the file"
          },
          "file_size": {
            "type": "number",
            "title": "File Size",
            "description": "Size of the file in kilobytes"
          },
          "bucket_name": {
            "type": "string",
            "title": "Bucket Name",
            "description": "Name of the bucket the file is stored in"
          },
          "object_key": {
            "type": "string",
            "title": "Object Key",
            "description": "Key of the S3 object"
          },
          "etag": {
            "type": "string",
            "title": "Etag",
            "description": "ETag of the S3 object"
          },
          "purpose": {
            "$ref": "#/components/schemas/Purpose",
            "description": "Purpose of the file, 0: GENERIC, 1: WORKFLOW_DEFINITION, 2: WORKFLOW_EXEC_FILE, 3: WORKFLOW_EXEC_LOG_FILE"
          },
          "wf_task_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Wf Task Id",
            "description": "The ID of the workflow task that made the request, used as a shorthand instead of sending `related_object_type` and `related_object_id`",
            "default": 0
          },
          "related_object_type": {
            "$ref": "#/components/schemas/RelatedObjectType",
            "description": "Type of the related object, 1: WF_TASK",
            "default": 1
          },
          "related_object_id": {
            "type": "integer",
            "title": "Related Object Id",
            "description": "The ID of the related object to be linked to the request",
            "default": 0
          },
          "extra_data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extra Data",
            "description": "Extra data for the file",
            "default": {}
          }
        },
        "type": "object",
        "required": ["file_name", "file_size", "bucket_name", "object_key", "etag", "purpose"],
        "title": "CreateFileMetadataRequestSchema",
        "description": "Request model for creating file metadata"
      },
      "CreatePresignedPostFieldsResponse": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key",
            "description": "Key for the pre-signed POST request"
          },
          "AWSAccessKeyId": {
            "type": "string",
            "title": "Awsaccesskeyid",
            "description": "AWS Access Key ID for the pre-signed POST request"
          },
          "policy": {
            "type": "string",
            "title": "Policy",
            "description": "Policy for the pre-signed POST request"
          },
          "signature": {
            "type": "string",
            "title": "Signature",
            "description": "Signature for the pre-signed POST request"
          }
        },
        "type": "object",
        "required": ["key", "AWSAccessKeyId", "policy", "signature"],
        "title": "CreatePresignedPostFieldsResponse",
        "description": "Model for the fields required for a pre-signed POST request."
      },
      "CustomerSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the customer",
            "example": 1
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the customer",
            "example": "ABC Bank"
          },
          "email_domain": {
            "type": "string",
            "title": "Email Domain",
            "description": "The email domain of the customer",
            "example": "abcbank.com"
          }
        },
        "type": "object",
        "required": ["id", "name", "email_domain"],
        "title": "CustomerSchema"
      },
      "DocumentPreprocessResponseSchema": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "message from the document preprocessor"
          }
        },
        "type": "object",
        "required": ["message"],
        "title": "DocumentPreprocessResponseSchema"
      },
      "ErrorDetails": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Code of the error"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Message of the error"
          }
        },
        "type": "object",
        "required": ["code", "message"],
        "title": "ErrorDetails",
        "description": "Details about an error in the response"
      },
      "FileMetadataResponseSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "ID of the file"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "Name of the file"
          },
          "file_size": {
            "type": "number",
            "title": "File Size",
            "description": "Size of the file"
          },
          "bucket_name": {
            "type": "string",
            "title": "Bucket Name",
            "description": "Name of the bucket the file is stored in"
          },
          "object_key": {
            "type": "string",
            "title": "Object Key",
            "description": "Key of the S3 object"
          },
          "etag": {
            "type": "string",
            "title": "Etag",
            "description": "ETag of the S3 object"
          },
          "purpose": {
            "$ref": "#/components/schemas/Purpose",
            "description": "Purpose of the file0: GENERIC, 1: WORKFLOW_DEFINITION, 2: WORKFLOW_EXEC_FILE, 3: WORKFLOW_EXEC_LOG_FILE"
          },
          "extra_data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Extra Data",
            "description": "Extra data for the file"
          },
          "time_created": {
            "type": "string",
            "format": "date-time",
            "title": "Time Created",
            "description": "Timestamp of when the file was created"
          }
        },
        "type": "object",
        "required": [
          "id",
          "file_name",
          "file_size",
          "bucket_name",
          "object_key",
          "etag",
          "purpose",
          "extra_data",
          "time_created"
        ],
        "title": "FileMetadataResponseSchema",
        "description": "Response model for file metadata"
      },
      "FileSearchTool-Input": {
        "properties": {
          "type": {
            "type": "string",
            "const": "file_search",
            "title": "Type"
          },
          "vector_store_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Vector Store Ids"
          },
          "filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ComparisonFilter"
              },
              {
                "$ref": "#/components/schemas/CompoundFilter"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "max_num_results": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Num Results"
          },
          "ranking_options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RankingOptions"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["type", "vector_store_ids"],
        "title": "FileSearchTool"
      },
      "FileSearchTool-Output": {
        "properties": {
          "type": {
            "type": "string",
            "const": "file_search",
            "title": "Type"
          },
          "vector_store_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Vector Store Ids"
          },
          "filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ComparisonFilter"
              },
              {
                "$ref": "#/components/schemas/CompoundFilter"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "max_num_results": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Num Results"
          },
          "ranking_options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RankingOptions"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["type", "vector_store_ids"],
        "title": "FileSearchTool"
      },
      "FileSearchToolCall": {
        "properties": {
          "type": {
            "type": "string",
            "const": "file_search_call",
            "title": "Type",
            "default": "file_search_call"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "ID of the content block"
          },
          "status": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["in_progress", "completed", "incomplete", "failed", "searching"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "Status of the content block"
          },
          "queries": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Queries",
            "description": "List of queries"
          },
          "results": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Results",
            "description": "Results of the file search"
          }
        },
        "type": "object",
        "required": ["id", "status", "queries"],
        "title": "FileSearchToolCall",
        "description": "File search tool call output"
      },
      "FunctionTool": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "parameters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameters"
          },
          "strict": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Strict"
          },
          "type": {
            "type": "string",
            "const": "function",
            "title": "Type"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["name", "type"],
        "title": "FunctionTool"
      },
      "FunctionToolCall": {
        "properties": {
          "type": {
            "type": "string",
            "const": "function_call",
            "title": "Type",
            "default": "function_call"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "ID of the content block"
          },
          "status": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["in_progress", "completed", "incomplete", "failed", "searching"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "Status of the content block"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the function"
          },
          "arguments": {
            "type": "string",
            "title": "Arguments",
            "description": "Arguments of the function"
          },
          "call_id": {
            "type": "string",
            "title": "Call Id",
            "description": "ID of the function call"
          }
        },
        "type": "object",
        "required": ["id", "status", "name", "arguments", "call_id"],
        "title": "FunctionToolCall",
        "description": "Function tool call output"
      },
      "GenerateSignedUrl": {
        "properties": {
          "uri": {
            "type": "string",
            "title": "Uri",
            "description": "URI of the target S3 object"
          },
          "signed_url": {
            "type": "string",
            "title": "Signed Url",
            "description": "Signed URL for the target S3 object"
          }
        },
        "type": "object",
        "required": ["uri", "signed_url"],
        "title": "GenerateSignedUrl",
        "description": "Model for representing an signed URL and its associated fields."
      },
      "GenerateSignedUrlRequestSchema": {
        "properties": {
          "uris": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Uris",
            "description": "List of URIs of the target S3 objects"
          }
        },
        "type": "object",
        "title": "GenerateSignedUrlRequestSchema",
        "description": "Request model for generating signed URLs."
      },
      "GenerateSignedUrlResponseSchema": {
        "properties": {
          "signed_urls": {
            "items": {
              "$ref": "#/components/schemas/GenerateSignedUrl"
            },
            "type": "array",
            "title": "Signed Urls",
            "description": "List of signed URLs"
          }
        },
        "type": "object",
        "title": "GenerateSignedUrlResponseSchema",
        "description": "Response model for returning signed Signed URLs."
      },
      "GenerateUploadUrl": {
        "properties": {
          "source_name": {
            "type": "string",
            "title": "Source Name",
            "description": "Name of the source file"
          },
          "s3_object": {
            "$ref": "#/components/schemas/TargetS3Object",
            "description": "Target S3 object"
          },
          "upload_request": {
            "$ref": "#/components/schemas/UploadToS3Request",
            "description": "Upload to S3 request"
          }
        },
        "type": "object",
        "required": ["source_name", "s3_object", "upload_request"],
        "title": "GenerateUploadUrl",
        "description": "Model for representing an upload URL and its associated fields."
      },
      "GenerateUploadUrlRequestSchema": {
        "properties": {
          "files": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Files",
            "description": "List of file names to upload"
          }
        },
        "type": "object",
        "title": "GenerateUploadUrlRequestSchema",
        "description": "Request model for generating upload URLs."
      },
      "GenerateUploadUrlResponseSchema": {
        "properties": {
          "upload_urls": {
            "items": {
              "$ref": "#/components/schemas/GenerateUploadUrl"
            },
            "type": "array",
            "title": "Upload Urls",
            "description": "List of upload URLs"
          }
        },
        "type": "object",
        "title": "GenerateUploadUrlResponseSchema",
        "description": "Response model for returning generated upload URLs."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthCheckResult": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "The result of the health check",
            "example": "OK"
          }
        },
        "type": "object",
        "required": ["message"],
        "title": "HealthCheckResult"
      },
      "IDExtractRequestSchema": {
        "properties": {
          "s3_uri": {
            "type": "string",
            "title": "S3 Uri",
            "description": "s3 uri of the document to extract IDs from"
          },
          "wf_task_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Wf Task Id",
            "description": "id of the workflow task that made the request",
            "default": 0
          }
        },
        "type": "object",
        "required": ["s3_uri"],
        "title": "IDExtractRequestSchema"
      },
      "IDExtractResponseSchema": {
        "properties": {
          "identity_documents": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object",
            "title": "Identity Documents",
            "description": "ids extracted from the document"
          }
        },
        "type": "object",
        "required": ["identity_documents"],
        "title": "IDExtractResponseSchema"
      },
      "ImageInput": {
        "properties": {
          "type": {
            "type": "string",
            "const": "input_image",
            "title": "Type",
            "default": "input_image"
          },
          "detail": {
            "type": "string",
            "enum": ["high", "low", "auto"],
            "title": "Detail",
            "description": "Detail of the image",
            "default": "auto"
          },
          "file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Id",
            "description": "File ID if its uploaded using openai API"
          },
          "image_url": {
            "type": "string",
            "title": "Image Url",
            "description": "URL of the image"
          }
        },
        "type": "object",
        "required": ["image_url"],
        "title": "ImageInput",
        "description": "Image input content block"
      },
      "IncompleteDetails": {
        "properties": {
          "reason": {
            "type": "string",
            "title": "Reason",
            "description": "Reason for the incomplete response"
          }
        },
        "type": "object",
        "required": ["reason"],
        "title": "IncompleteDetails",
        "description": "Details about why the response is incomplete"
      },
      "InputTokensDetails": {
        "properties": {
          "cached_tokens": {
            "type": "integer",
            "title": "Cached Tokens"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["cached_tokens"],
        "title": "InputTokensDetails"
      },
      "JSONObjectFormatConfig": {
        "properties": {
          "type": {
            "type": "string",
            "const": "json_object",
            "title": "Type",
            "default": "json_object"
          }
        },
        "type": "object",
        "title": "JSONObjectFormatConfig",
        "description": "JSON object format configuration (older method)"
      },
      "JSONSchemaFormatConfig": {
        "properties": {
          "type": {
            "type": "string",
            "const": "json_schema",
            "title": "Type",
            "default": "json_schema"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the JSON schema"
          },
          "schema": {
            "additionalProperties": true,
            "type": "object",
            "title": "Schema",
            "description": "The JSON schema to validate against"
          }
        },
        "type": "object",
        "title": "JSONSchemaFormatConfig",
        "description": "JSON Schema format configuration for structured outputs"
      },
      "Logprob": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "bytes": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Bytes"
          },
          "logprob": {
            "type": "number",
            "title": "Logprob"
          },
          "top_logprobs": {
            "items": {
              "$ref": "#/components/schemas/LogprobTopLogprob"
            },
            "type": "array",
            "title": "Top Logprobs"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["token", "bytes", "logprob", "top_logprobs"],
        "title": "Logprob"
      },
      "LogprobTopLogprob": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "bytes": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Bytes"
          },
          "logprob": {
            "type": "number",
            "title": "Logprob"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["token", "bytes", "logprob"],
        "title": "LogprobTopLogprob"
      },
      "MFAActivateResponseSchema": {
        "properties": {
          "device_identifier": {
            "type": "string",
            "title": "Device Identifier",
            "description": "The identifier of MFA device"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "message to the user"
          }
        },
        "type": "object",
        "required": ["device_identifier", "message"],
        "title": "MFAActivateResponseSchema"
      },
      "MFASetupResponseSchema": {
        "properties": {
          "provisioning_uri": {
            "type": "string",
            "title": "Provisioning Uri",
            "description": "The provisioning URI for the MFA device"
          }
        },
        "type": "object",
        "required": ["provisioning_uri"],
        "title": "MFASetupResponseSchema"
      },
      "MLFoundationModelSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "unique identifier for the model"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "name of the model"
          },
          "provider": {
            "type": "string",
            "title": "Provider",
            "description": "provider of the model"
          },
          "config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config",
            "description": "configuration for the model"
          }
        },
        "type": "object",
        "required": ["id", "name", "provider"],
        "title": "MLFoundationModelSchema",
        "description": "ML Foundation Model's response schema"
      },
      "MetadataExtractRequestSchema": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content",
            "description": "The DOM of the workflow task"
          }
        },
        "type": "object",
        "required": ["content"],
        "title": "MetadataExtractRequestSchema"
      },
      "MetadataTag": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key",
            "description": "The key of the metadata tag",
            "example": "loan_id"
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "The value of the metadata tag",
            "example": "1234567890"
          }
        },
        "type": "object",
        "required": ["key", "value"],
        "title": "MetadataTag"
      },
      "OutputTokensDetails": {
        "properties": {
          "reasoning_tokens": {
            "type": "integer",
            "title": "Reasoning Tokens"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["reasoning_tokens"],
        "title": "OutputTokensDetails"
      },
      "PaginationMetaSchema": {
        "properties": {
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "Number of items per page",
            "example": 10
          },
          "count": {
            "type": "integer",
            "title": "Count",
            "description": "Number of items in the current page",
            "default": 0,
            "example": 0
          },
          "total": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total",
            "description": "Total number of items across all pages",
            "example": 100
          },
          "sort": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sort",
            "description": "List of sort instructions as key-direction pairs (e.g., [{'name': 'asc'}, {'created_at': 'desc'}])",
            "example": [
              {
                "name": "asc"
              },
              {
                "created_at": "desc"
              }
            ]
          },
          "after": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "After",
            "description": "Cursor pointing to the item after which to start"
          },
          "before": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Before",
            "description": "Cursor pointing to the item before which to start"
          },
          "has_next": {
            "type": "boolean",
            "title": "Has Next",
            "description": "Whether there are more items after the current page",
            "default": false
          },
          "has_prev": {
            "type": "boolean",
            "title": "Has Prev",
            "description": "Whether there are more items before the current page",
            "default": false
          }
        },
        "type": "object",
        "required": ["limit"],
        "title": "PaginationMetaSchema"
      },
      "PendingSafetyCheck": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "code": {
            "type": "string",
            "title": "Code"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["id", "code", "message"],
        "title": "PendingSafetyCheck"
      },
      "Purpose": {
        "type": "integer",
        "enum": [0, 1, 2, 3, 4],
        "title": "Purpose"
      },
      "RankingOptions": {
        "properties": {
          "ranker": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["auto", "default-2024-11-15"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Ranker"
          },
          "score_threshold": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score Threshold"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "RankingOptions"
      },
      "Reasoning": {
        "properties": {
          "type": {
            "type": "string",
            "const": "reasoning",
            "title": "Type",
            "default": "reasoning"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "ID of the content block"
          },
          "status": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["in_progress", "completed", "incomplete", "failed", "searching"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "Status of the content block"
          },
          "summary": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Summary",
            "description": "Summary of the reasoning"
          }
        },
        "type": "object",
        "required": ["id", "status", "summary"],
        "title": "Reasoning",
        "description": "Reasoning output"
      },
      "RelatedObjectType": {
        "type": "integer",
        "enum": [1],
        "title": "RelatedObjectType"
      },
      "RequestType": {
        "type": "integer",
        "enum": [1, 2, 3, 4, 5],
        "title": "RequestType"
      },
      "ResponseComputerToolCall": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ActionClick"
              },
              {
                "$ref": "#/components/schemas/ActionDoubleClick"
              },
              {
                "$ref": "#/components/schemas/ActionDrag"
              },
              {
                "$ref": "#/components/schemas/ActionKeypress"
              },
              {
                "$ref": "#/components/schemas/ActionMove"
              },
              {
                "$ref": "#/components/schemas/ActionScreenshot"
              },
              {
                "$ref": "#/components/schemas/ActionScroll"
              },
              {
                "$ref": "#/components/schemas/ActionType"
              },
              {
                "$ref": "#/components/schemas/ActionWait"
              }
            ],
            "title": "Action"
          },
          "call_id": {
            "type": "string",
            "title": "Call Id"
          },
          "pending_safety_checks": {
            "items": {
              "$ref": "#/components/schemas/PendingSafetyCheck"
            },
            "type": "array",
            "title": "Pending Safety Checks"
          },
          "status": {
            "type": "string",
            "enum": ["in_progress", "completed", "incomplete"],
            "title": "Status"
          },
          "type": {
            "type": "string",
            "const": "computer_call",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["id", "action", "call_id", "pending_safety_checks", "status", "type"],
        "title": "ResponseComputerToolCall"
      },
      "ResponseFileSearchToolCall": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "queries": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Queries"
          },
          "status": {
            "type": "string",
            "enum": ["in_progress", "searching", "completed", "incomplete", "failed"],
            "title": "Status"
          },
          "type": {
            "type": "string",
            "const": "file_search_call",
            "title": "Type"
          },
          "results": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Results"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["id", "queries", "status", "type"],
        "title": "ResponseFileSearchToolCall"
      },
      "ResponseFunctionToolCall": {
        "properties": {
          "arguments": {
            "type": "string",
            "title": "Arguments"
          },
          "call_id": {
            "type": "string",
            "title": "Call Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "const": "function_call",
            "title": "Type"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "status": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["in_progress", "completed", "incomplete"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Status"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["arguments", "call_id", "name", "type"],
        "title": "ResponseFunctionToolCall"
      },
      "ResponseFunctionWebSearch": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ActionSearch"
              },
              {
                "$ref": "#/components/schemas/ActionOpenPage"
              },
              {
                "$ref": "#/components/schemas/ActionFind"
              }
            ],
            "title": "Action"
          },
          "status": {
            "type": "string",
            "enum": ["in_progress", "searching", "completed", "failed"],
            "title": "Status"
          },
          "type": {
            "type": "string",
            "const": "web_search_call",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["id", "action", "status", "type"],
        "title": "ResponseFunctionWebSearch"
      },
      "ResponseOutputMessage": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "content": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ResponseOutputText"
                },
                {
                  "$ref": "#/components/schemas/ResponseOutputRefusal"
                }
              ]
            },
            "type": "array",
            "title": "Content"
          },
          "role": {
            "type": "string",
            "const": "assistant",
            "title": "Role"
          },
          "status": {
            "type": "string",
            "enum": ["in_progress", "completed", "incomplete"],
            "title": "Status"
          },
          "type": {
            "type": "string",
            "const": "message",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["id", "content", "role", "status", "type"],
        "title": "ResponseOutputMessage"
      },
      "ResponseOutputRefusal": {
        "properties": {
          "refusal": {
            "type": "string",
            "title": "Refusal"
          },
          "type": {
            "type": "string",
            "const": "refusal",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["refusal", "type"],
        "title": "ResponseOutputRefusal"
      },
      "ResponseOutputText": {
        "properties": {
          "annotations": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AnnotationFileCitation"
                },
                {
                  "$ref": "#/components/schemas/AnnotationURLCitation"
                },
                {
                  "$ref": "#/components/schemas/AnnotationContainerFileCitation"
                },
                {
                  "$ref": "#/components/schemas/AnnotationFilePath"
                }
              ]
            },
            "type": "array",
            "title": "Annotations"
          },
          "text": {
            "type": "string",
            "title": "Text"
          },
          "type": {
            "type": "string",
            "const": "output_text",
            "title": "Type"
          },
          "logprobs": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Logprob"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logprobs"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["annotations", "text", "type"],
        "title": "ResponseOutputText"
      },
      "ResponseReasoningItem": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "summary": {
            "items": {
              "$ref": "#/components/schemas/Summary"
            },
            "type": "array",
            "title": "Summary"
          },
          "type": {
            "type": "string",
            "const": "reasoning",
            "title": "Type"
          },
          "content": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Content"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "encrypted_content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Encrypted Content"
          },
          "status": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["in_progress", "completed", "incomplete"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Status"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["id", "summary", "type"],
        "title": "ResponseReasoningItem"
      },
      "ResponseSchema_DocumentPreprocessResponseSchema_PaginationMetaSchema_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DocumentPreprocessResponseSchema"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[DocumentPreprocessResponseSchema, PaginationMetaSchema]"
      },
      "ResponseSchema_FileMetadataResponseSchema_PaginationMetaSchema_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FileMetadataResponseSchema"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[FileMetadataResponseSchema, PaginationMetaSchema]"
      },
      "ResponseSchema_GenerateSignedUrlResponseSchema_PaginationMetaSchema_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GenerateSignedUrlResponseSchema"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[GenerateSignedUrlResponseSchema, PaginationMetaSchema]"
      },
      "ResponseSchema_GenerateUploadUrlResponseSchema_PaginationMetaSchema_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GenerateUploadUrlResponseSchema"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[GenerateUploadUrlResponseSchema, PaginationMetaSchema]"
      },
      "ResponseSchema_HealthCheckResult_PaginationMetaSchema_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/HealthCheckResult"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[HealthCheckResult, PaginationMetaSchema]"
      },
      "ResponseSchema_IDExtractResponseSchema_PaginationMetaSchema_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/IDExtractResponseSchema"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[IDExtractResponseSchema, PaginationMetaSchema]"
      },
      "ResponseSchema_List_MetadataTag__PaginationMetaSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/MetadataTag"
            },
            "type": "array",
            "title": "Data"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[List[MetadataTag], PaginationMetaSchema]"
      },
      "ResponseSchema_List_WFTaskResponseSchema__PaginationMetaSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/WFTaskResponseSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[List[WFTaskResponseSchema], PaginationMetaSchema]"
      },
      "ResponseSchema_MFAActivateResponseSchema_PaginationMetaSchema_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MFAActivateResponseSchema"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[MFAActivateResponseSchema, PaginationMetaSchema]"
      },
      "ResponseSchema_MFASetupResponseSchema_PaginationMetaSchema_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MFASetupResponseSchema"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[MFASetupResponseSchema, PaginationMetaSchema]"
      },
      "ResponseSchema_MLFoundationModelSchema_PaginationMetaSchema_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MLFoundationModelSchema"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[MLFoundationModelSchema, PaginationMetaSchema]"
      },
      "ResponseSchema_NoneType_PaginationMetaSchema_": {
        "properties": {
          "data": {
            "type": "null",
            "title": "Data"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[NoneType, PaginationMetaSchema]"
      },
      "ResponseSchema_SarisLLMInferenceResponseSchema_PaginationMetaSchema_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SarisLLMInferenceResponseSchema"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[SarisLLMInferenceResponseSchema, PaginationMetaSchema]"
      },
      "ResponseSchema_SelfUserResponseSchema_PaginationMetaSchema_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SelfUserResponseSchema"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[SelfUserResponseSchema, PaginationMetaSchema]"
      },
      "ResponseSchema_Sequence_MLFoundationModelSchema__PaginationMetaSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/MLFoundationModelSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[Sequence[MLFoundationModelSchema], PaginationMetaSchema]"
      },
      "ResponseSchema_Sequence_WFTaskMetadataResponseSchema__PaginationMetaSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/WFTaskMetadataResponseSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[Sequence[WFTaskMetadataResponseSchema], PaginationMetaSchema]"
      },
      "ResponseSchema_SignatureExtractResponseSchema_PaginationMetaSchema_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SignatureExtractResponseSchema"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[SignatureExtractResponseSchema, PaginationMetaSchema]"
      },
      "ResponseSchema_Union_AppValidationTokenSchema__Sequence_AppValidationTokenSchema___PaginationMetaSchema_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AppValidationTokenSchema"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/AppValidationTokenSchema"
                },
                "type": "array"
              }
            ],
            "title": "Data"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[Union[AppValidationTokenSchema, Sequence[AppValidationTokenSchema]], PaginationMetaSchema]"
      },
      "ResponseSchema_Union_CustomerSchema__Sequence_CustomerSchema___PaginationMetaSchema_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomerSchema"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/CustomerSchema"
                },
                "type": "array"
              }
            ],
            "title": "Data"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[Union[CustomerSchema, Sequence[CustomerSchema]], PaginationMetaSchema]"
      },
      "ResponseSchema_Union_UILocationResponseSchema__Sequence_UILocationResponseSchema___PaginationMetaSchema_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UILocationResponseSchema"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/UILocationResponseSchema"
                },
                "type": "array"
              }
            ],
            "title": "Data"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[Union[UILocationResponseSchema, Sequence[UILocationResponseSchema]], PaginationMetaSchema]"
      },
      "ResponseSchema_Union_UserResponseSchema__Sequence_UserResponseSchema___PaginationMetaSchema_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserResponseSchema"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/UserResponseSchema"
                },
                "type": "array"
              }
            ],
            "title": "Data"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[Union[UserResponseSchema, Sequence[UserResponseSchema]], PaginationMetaSchema]"
      },
      "ResponseSchema_Union_WFTaskResponseSchema__Sequence_WFTaskResponseSchema___PaginationMetaSchema_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WFTaskResponseSchema"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/WFTaskResponseSchema"
                },
                "type": "array"
              }
            ],
            "title": "Data"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[Union[WFTaskResponseSchema, Sequence[WFTaskResponseSchema]], PaginationMetaSchema]"
      },
      "ResponseSchema_Union_WFTaskResultsResponseSchema__Sequence_WFTaskResultsResponseSchema___PaginationMetaSchema_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WFTaskResultsResponseSchema"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/WFTaskResultsResponseSchema"
                },
                "type": "array"
              }
            ],
            "title": "Data"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[Union[WFTaskResultsResponseSchema, Sequence[WFTaskResultsResponseSchema]], PaginationMetaSchema]"
      },
      "ResponseSchema_Union_WorkflowResponseSchema__Sequence_WorkflowResponseSchema___PaginationMetaSchema_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WorkflowResponseSchema"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/WorkflowResponseSchema"
                },
                "type": "array"
              }
            ],
            "title": "Data"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[Union[WorkflowResponseSchema, Sequence[WorkflowResponseSchema]], PaginationMetaSchema]"
      },
      "ResponseSchema_UserResponseSchema_PaginationMetaSchema_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserResponseSchema"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[UserResponseSchema, PaginationMetaSchema]"
      },
      "ResponseSchema_WFTaskResponseSchema_PaginationMetaSchema_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WFTaskResponseSchema"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ResponseSchema[WFTaskResponseSchema, PaginationMetaSchema]"
      },
      "ResponseUsage": {
        "properties": {
          "input_tokens": {
            "type": "integer",
            "title": "Input Tokens"
          },
          "input_tokens_details": {
            "$ref": "#/components/schemas/InputTokensDetails"
          },
          "output_tokens": {
            "type": "integer",
            "title": "Output Tokens"
          },
          "output_tokens_details": {
            "$ref": "#/components/schemas/OutputTokensDetails"
          },
          "total_tokens": {
            "type": "integer",
            "title": "Total Tokens"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["input_tokens", "input_tokens_details", "output_tokens", "output_tokens_details", "total_tokens"],
        "title": "ResponseUsage"
      },
      "Result": {
        "properties": {
          "attributes": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attributes"
          },
          "file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Id"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score"
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "Result"
      },
      "RuntimeLocation": {
        "type": "string",
        "enum": ["desktop-app", "backend"],
        "title": "RuntimeLocation"
      },
      "SarisFileInput": {
        "properties": {
          "type": {
            "type": "string",
            "const": "input_file",
            "title": "Type",
            "default": "input_file"
          },
          "filename": {
            "type": "string",
            "title": "Filename",
            "description": "Name of the file"
          }
        },
        "type": "object",
        "required": ["filename"],
        "title": "SarisFileInput",
        "description": "Saris file input content block"
      },
      "SarisInputMessage": {
        "properties": {
          "role": {
            "type": "string",
            "title": "Role",
            "description": "role of the message"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TextInput"
                    },
                    {
                      "$ref": "#/components/schemas/ImageInput"
                    },
                    {
                      "$ref": "#/components/schemas/SarisFileInput"
                    },
                    {
                      "$ref": "#/components/schemas/FileSearchToolCall"
                    },
                    {
                      "$ref": "#/components/schemas/FunctionToolCall"
                    },
                    {
                      "$ref": "#/components/schemas/WebSearchToolCall"
                    },
                    {
                      "$ref": "#/components/schemas/ComputerToolCall"
                    },
                    {
                      "$ref": "#/components/schemas/Reasoning"
                    }
                  ]
                },
                "type": "array"
              }
            ],
            "title": "Content",
            "description": "Content of the message"
          },
          "type": {
            "anyOf": [
              {
                "type": "string",
                "const": "message"
              },
              {
                "type": "null"
              }
            ],
            "title": "Type",
            "description": "Type of the content block",
            "default": "message"
          }
        },
        "type": "object",
        "required": ["role", "content"],
        "title": "SarisInputMessage",
        "description": "Input message with role and content"
      },
      "SarisLLMInferenceRequestSchema": {
        "properties": {
          "input": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/SarisInputMessage"
                },
                "type": "array"
              }
            ],
            "title": "Input",
            "description": "Input of the request"
          },
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model",
            "description": "Model to use for the request"
          },
          "include": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Include",
            "description": "Include additional information in the response"
          },
          "instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instructions",
            "description": "Instructions for the model"
          },
          "max_output_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Output Tokens",
            "description": "Maximum number of tokens to generate"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object",
                "maxProperties": 16
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Set of 16 key-value pairs that can be attached to an object",
            "key_constraints": {
              "description": "Keys must be strings with a maximum length of 64 characters",
              "max_length": 64
            },
            "value_constraints": {
              "description": "Values must be strings with a maximum length of 512 characters",
              "max_length": 512
            }
          },
          "parallel_tool_calls": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parallel Tool Calls",
            "description": "Whether to allow the model to run tool calls in parallel",
            "default": true
          },
          "previous_response_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Response Id",
            "description": "The unique ID of the previous response to the model. Use this to create multi-turn conversations"
          },
          "reasoning": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "properties": {
              "effort": {
                "type": "string",
                "enum": ["low", "medium", "high"],
                "description": "Constrains effort on reasoning for reasoning models",
                "default": "medium"
              },
              "summary": {
                "type": "string",
                "enum": ["auto", "concise", "detailed"],
                "description": "A summary of the reasoning performed by the model"
              }
            },
            "title": "Reasoning",
            "description": "Configuration options for reasoning models (o-series models only)"
          },
          "store": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Store",
            "description": "Whether to store the response",
            "default": false
          },
          "stream": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream",
            "description": "Whether to stream the response",
            "default": false
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 2.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "Temperature for the model",
            "default": 1.0
          },
          "text": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TextConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "Text configuration for the model"
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/FileSearchTool-Input"
                    },
                    {
                      "$ref": "#/components/schemas/FunctionTool"
                    },
                    {
                      "$ref": "#/components/schemas/ComputerTool"
                    },
                    {
                      "$ref": "#/components/schemas/WebSearchTool"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools",
            "description": "Tools for the model"
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["none", "auto", "required"]
              },
              {
                "$ref": "#/components/schemas/ToolChoiceTypes"
              },
              {
                "$ref": "#/components/schemas/ToolChoiceFunction"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Choice",
            "description": "Tool choice for the model"
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Top P for the model",
            "default": 0.9
          },
          "truncation": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Truncation",
            "description": "Truncation for the model",
            "default": "disabled"
          },
          "user": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User",
            "description": "User for the model"
          },
          "request_type": {
            "$ref": "#/components/schemas/RequestType",
            "description": "type of request",
            "default": 1
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id",
            "description": "id of the customer who made the request",
            "default": 0
          },
          "wf_task_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Wf Task Id",
            "description": "workflow task ID which the request is part of",
            "default": 0
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["input"],
        "title": "SarisLLMInferenceRequestSchema",
        "description": "SARIS request model that extends Saris OpenAI responses request model."
      },
      "SarisLLMInferenceResponseSchema": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for this Response"
          },
          "object": {
            "type": "string",
            "const": "response",
            "title": "Object",
            "description": "The object type of this resource",
            "default": "response"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At",
            "description": "Unix timestamp (in seconds) of when this Response was created"
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Model ID used to generate the response"
          },
          "status": {
            "type": "string",
            "enum": ["completed", "failed", "in_progress", "incomplete", "cancelled", "queued"],
            "title": "Status",
            "description": "The status of the response generation"
          },
          "output": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ResponseOutputMessage"
                },
                {
                  "$ref": "#/components/schemas/ResponseFileSearchToolCall"
                },
                {
                  "$ref": "#/components/schemas/ResponseFunctionToolCall"
                },
                {
                  "$ref": "#/components/schemas/ResponseFunctionWebSearch"
                },
                {
                  "$ref": "#/components/schemas/ResponseComputerToolCall"
                },
                {
                  "$ref": "#/components/schemas/ResponseReasoningItem"
                }
              ]
            },
            "type": "array",
            "title": "Output",
            "description": "An array of content items generated by the model"
          },
          "output_text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Text",
            "description": "SDK-only convenience property that contains the aggregated text output"
          },
          "error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ErrorDetails"
              },
              {
                "type": "null"
              }
            ],
            "description": "An error object returned when the model fails to generate a Response"
          },
          "incomplete_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IncompleteDetails"
              },
              {
                "type": "null"
              }
            ],
            "description": "Details about why the response is incomplete"
          },
          "usage": {
            "$ref": "#/components/schemas/ResponseUsage",
            "description": "Token usage details"
          },
          "service_tier": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["auto", "default", "flex"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Service Tier",
            "description": "Specifies the latency tier used for processing the request"
          },
          "user": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User",
            "description": "User for the model"
          },
          "truncation": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Truncation",
            "description": "Truncation for the model",
            "default": "disabled"
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Top P for the model",
            "default": 0.9
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/FileSearchTool-Output"
                    },
                    {
                      "$ref": "#/components/schemas/FunctionTool"
                    },
                    {
                      "$ref": "#/components/schemas/ComputerTool"
                    },
                    {
                      "$ref": "#/components/schemas/WebSearchTool"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools",
            "description": "Tools for the model"
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["none", "auto", "required"]
              },
              {
                "$ref": "#/components/schemas/ToolChoiceTypes"
              },
              {
                "$ref": "#/components/schemas/ToolChoiceFunction"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Choice",
            "description": "Tool choice for the model"
          },
          "text": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "description": "Text for the model"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 2.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "Temperature for the model",
            "default": 1.0
          },
          "instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instructions",
            "description": "Instructions for the model"
          },
          "max_output_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Output Tokens",
            "description": "Maximum number of tokens to generate"
          },
          "parallel_tool_calls": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parallel Tool Calls",
            "description": "Whether to allow the model to run tool calls in parallel",
            "default": true
          },
          "previous_response_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Response Id",
            "description": "The unique ID of the previous response to the model"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["id", "created_at", "model", "status", "output", "usage"],
        "title": "SarisLLMInferenceResponseSchema",
        "description": "SARIS response model that extends OpenAI responses response model."
      },
      "SelfUpdateUserSchema": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the user",
            "example": "John Doe"
          },
          "old_password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Old Password",
            "description": "The old password of the user",
            "example": "password"
          },
          "new_password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "New Password",
            "description": "The new password of the user",
            "example": "password"
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number",
            "description": "The phone number of the user",
            "example": "1234567890"
          }
        },
        "type": "object",
        "title": "SelfUpdateUserSchema"
      },
      "SelfUserResponseSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the user",
            "example": 1
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "The email of the user",
            "example": "john@example.com",
            "sensitivity": 1
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the user",
            "example": "John Doe"
          },
          "force_reset_password": {
            "type": "boolean",
            "title": "Force Reset Password",
            "description": "Whether to force reset the password",
            "default": false,
            "example": false
          }
        },
        "type": "object",
        "required": ["id", "email", "name"],
        "title": "SelfUserResponseSchema"
      },
      "SetPasswordWithTokenSchema": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token",
            "description": "The token to set password",
            "example": "token"
          },
          "new_password": {
            "type": "string",
            "title": "New Password",
            "description": "The new password of the user",
            "example": "password"
          },
          "mfa_challenge": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mfa Challenge",
            "description": "The challenge response to the MFA challenge",
            "example": "challenge"
          }
        },
        "type": "object",
        "required": ["token", "new_password"],
        "title": "SetPasswordWithTokenSchema"
      },
      "SignatureExtractRequestSchema": {
        "properties": {
          "s3_uri": {
            "type": "string",
            "title": "S3 Uri",
            "description": "s3 uri of the document to extract signatures from"
          },
          "wf_task_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Wf Task Id",
            "description": "id of the workflow task that made the request",
            "default": 0
          }
        },
        "type": "object",
        "required": ["s3_uri"],
        "title": "SignatureExtractRequestSchema"
      },
      "SignatureExtractResponseSchema": {
        "properties": {
          "signatures": {
            "additionalProperties": {
              "items": {
                "additionalProperties": true,
                "type": "object"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Signatures",
            "description": "list of signatures extracted from the document"
          }
        },
        "type": "object",
        "required": ["signatures"],
        "title": "SignatureExtractResponseSchema"
      },
      "Status": {
        "type": "integer",
        "enum": [-99, 0, 1, 2],
        "title": "Status"
      },
      "Summary": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "type": {
            "type": "string",
            "const": "summary_text",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["text", "type"],
        "title": "Summary"
      },
      "TargetS3Object": {
        "properties": {
          "uri": {
            "type": "string",
            "title": "Uri",
            "description": "URI of the target S3 object"
          },
          "bucket_name": {
            "type": "string",
            "title": "Bucket Name",
            "description": "Name of the bucket the target S3 object is stored in"
          },
          "object_key": {
            "type": "string",
            "title": "Object Key",
            "description": "Key of the target S3 object"
          }
        },
        "type": "object",
        "required": ["uri", "bucket_name", "object_key"],
        "title": "TargetS3Object"
      },
      "TextConfig": {
        "properties": {
          "format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TextFormatConfig"
              },
              {
                "$ref": "#/components/schemas/JSONSchemaFormatConfig"
              },
              {
                "$ref": "#/components/schemas/JSONObjectFormatConfig"
              }
            ],
            "title": "Format",
            "description": "Format configuration for the model's output"
          }
        },
        "type": "object",
        "title": "TextConfig",
        "description": "Configuration options for text response from the model"
      },
      "TextFormatConfig": {
        "properties": {
          "type": {
            "type": "string",
            "const": "text",
            "title": "Type",
            "default": "text"
          }
        },
        "type": "object",
        "title": "TextFormatConfig",
        "description": "Default text format configuration"
      },
      "TextInput": {
        "properties": {
          "type": {
            "type": "string",
            "const": "input_text",
            "title": "Type",
            "default": "input_text"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Text content"
          }
        },
        "type": "object",
        "required": ["text"],
        "title": "TextInput",
        "description": "Text input content block"
      },
      "TokenSchema": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token",
            "description": "The access token in JWT format, containing the following claims: iss (the issuer), sub (the user ID), jti (the token ID), exp (the expiration time), iat (the issued at time), saris_jtt (the Saris token type), saris_user_data (any additional user data)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzd..."
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "description": "The type of token (only Bearer is supported)",
            "example": "bearer"
          }
        },
        "type": "object",
        "required": ["access_token", "token_type"],
        "title": "TokenSchema",
        "description": "The API return schema for user tokens. Contains the JWT encoded token."
      },
      "TokenUpgradeBodySchema": {
        "properties": {
          "mfa_challenge": {
            "type": "string",
            "title": "Mfa Challenge",
            "description": "The challenge response to the MFA challenge"
          }
        },
        "type": "object",
        "required": ["mfa_challenge"],
        "title": "TokenUpgradeBodySchema",
        "description": "The schema for the request body of the token upgrade request (/PUT on /token)."
      },
      "ToolChoiceFunction": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "const": "function",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["name", "type"],
        "title": "ToolChoiceFunction"
      },
      "ToolChoiceTypes": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "file_search",
              "web_search_preview",
              "computer_use_preview",
              "web_search_preview_2025_03_11",
              "image_generation",
              "code_interpreter"
            ],
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["type"],
        "title": "ToolChoiceTypes"
      },
      "Type": {
        "type": "integer",
        "enum": [1, 2, 3, 4, 5],
        "title": "Type"
      },
      "UILocationResponseSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the UI location",
            "example": 1
          },
          "type": {
            "$ref": "#/components/schemas/Type",
            "description": "The type of the UI location",
            "example": 3
          },
          "source": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Source",
            "description": "The source of the workflow task context",
            "example": ["example.com", "example.com/outlook"]
          },
          "metadata_extract_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata Extract Config",
            "description": "The metadata extract config of the workflow task context",
            "default": {},
            "example": {
              "loan_id": {
                "patterns": ["//div[@class='loan-id']"],
                "prompt": "extract the loan id from the page"
              }
            }
          },
          "time_created": {
            "type": "string",
            "format": "date-time",
            "title": "Time Created",
            "description": "The time the workflow task context was created",
            "example": "2021-01-01T00:00:00Z"
          }
        },
        "type": "object",
        "required": ["id", "type", "source", "time_created"],
        "title": "UILocationResponseSchema"
      },
      "UploadToS3Request": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL for the pre-signed POST request"
          },
          "fields": {
            "$ref": "#/components/schemas/CreatePresignedPostFieldsResponse",
            "description": "Fields for the pre-signed POST request"
          }
        },
        "type": "object",
        "required": ["url", "fields"],
        "title": "UploadToS3Request"
      },
      "UserLocation": {
        "properties": {
          "type": {
            "type": "string",
            "const": "approximate",
            "title": "Type"
          },
          "city": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "City"
          },
          "country": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Country"
          },
          "region": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Region"
          },
          "timezone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timezone"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["type"],
        "title": "UserLocation"
      },
      "UserResponseSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the user",
            "example": 1
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "The email of the user",
            "example": "john@example.com",
            "sensitivity": 1
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the user",
            "example": "John Doe"
          }
        },
        "type": "object",
        "required": ["id", "email", "name"],
        "title": "UserResponseSchema"
      },
      "UserType": {
        "type": "integer",
        "enum": [0, 1],
        "title": "UserType"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "WFExecEnvironment": {
        "type": "integer",
        "enum": [1, 2],
        "title": "WFExecEnvironment"
      },
      "WFExecMode": {
        "type": "integer",
        "enum": [1, 2],
        "title": "WFExecMode"
      },
      "WFExecStatus": {
        "type": "integer",
        "enum": [-1, 0, 1, 2, 3, 4],
        "title": "WFExecStatus"
      },
      "WFTaskBatchStartRequestSchema": {
        "properties": {
          "tasks": {
            "items": {
              "$ref": "#/components/schemas/WFTaskStartRequestSchema"
            },
            "type": "array",
            "minItems": 1,
            "title": "Tasks",
            "description": "Array of workflow tasks to start (minimum 1 task required)",
            "example": [
              {
                "entry_point": 1,
                "inputs": {
                  "user_id": 123456
                },
                "workflow_id": 1
              },
              {
                "entry_point": 2,
                "inputs": {
                  "email_id": "abc123"
                },
                "workflow_id": 2
              }
            ]
          }
        },
        "type": "object",
        "required": ["tasks"],
        "title": "WFTaskBatchStartRequestSchema"
      },
      "WFTaskCreateRequestSchema": {
        "properties": {
          "wf_task_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Wf Task Id",
            "description": "The ID of the workflow task",
            "example": 1
          },
          "workflow_id": {
            "type": "integer",
            "title": "Workflow Id",
            "description": "The ID of the workflow",
            "example": 1
          },
          "entry_point": {
            "$ref": "#/components/schemas/Type",
            "description": "The entry point of the workflow, 1: USER_INPUT, 2: EMAIL",
            "example": 1
          },
          "exec_environment": {
            "$ref": "#/components/schemas/WFExecEnvironment",
            "description": "The execution environment of the workflow, 1: DESKTOP_APP, 2: BACKGROUND_ENGINE",
            "example": 1
          },
          "exec_status": {
            "$ref": "#/components/schemas/WFExecStatus",
            "description": "The execution status of the workflow, -1: FAILED, 0: RUNNING, 1: COMPLETED, 2: PENDING, 3: PAUSED, 4: CANCELLED",
            "example": 0
          },
          "exec_log_file_metadata_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exec Log File Metadata Id",
            "description": "The ID of the execution log file",
            "example": 1
          },
          "time_started": {
            "type": "string",
            "format": "date-time",
            "title": "Time Started",
            "description": "The time the workflow task started",
            "example": "2021-01-01T00:00:00Z"
          },
          "time_finished": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Finished",
            "description": "The time the workflow task finished",
            "example": "2021-01-01T00:00:00Z"
          }
        },
        "type": "object",
        "required": ["workflow_id", "entry_point", "exec_environment", "exec_status", "time_started"],
        "title": "WFTaskCreateRequestSchema"
      },
      "WFTaskMetadataResponseSchema": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key",
            "description": "The key of the metadata",
            "example": "loan_id"
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "The value of the metadata",
            "example": "123456"
          },
          "time_created": {
            "type": "string",
            "format": "date-time",
            "title": "Time Created",
            "description": "The time the metadata was created",
            "example": "2021-01-01T00:00:00Z"
          }
        },
        "type": "object",
        "required": ["key", "value", "time_created"],
        "title": "WFTaskMetadataResponseSchema"
      },
      "WFTaskMetadataUpdateRequestSchema": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key",
            "description": "The key of the metadata",
            "example": "loan_id"
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "The value of the metadata",
            "example": "123456"
          }
        },
        "type": "object",
        "required": ["key", "value"],
        "title": "WFTaskMetadataUpdateRequestSchema"
      },
      "WFTaskResponseSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the workflow task",
            "example": 2
          },
          "workflow_id": {
            "type": "integer",
            "title": "Workflow Id",
            "description": "The ID of the workflow",
            "example": 1
          },
          "workflow_name": {
            "type": "string",
            "title": "Workflow Name",
            "description": "The name of the workflow",
            "example": "HELOC Loan Application Review"
          },
          "workflow_version": {
            "type": "string",
            "title": "Workflow Version",
            "description": "The version of the workflow",
            "example": "1.0.0"
          },
          "workflow_runtime_location": {
            "$ref": "#/components/schemas/RuntimeLocation",
            "description": "The runtime location of the workflow, 'desktop-app' or 'backend'",
            "example": "desktop-app"
          },
          "entry_point": {
            "$ref": "#/components/schemas/Type",
            "description": "The entry point of the workflow, 1: USER_INPUT, 2: EMAIL",
            "example": 1
          },
          "exec_environment": {
            "$ref": "#/components/schemas/WFExecEnvironment",
            "description": "The execution environment of the workflow, 1: DESKTOP_APP, 2: BACKGROUND_ENGINE",
            "example": 1
          },
          "exec_status": {
            "$ref": "#/components/schemas/WFExecStatus",
            "description": "The execution status of the workflow, -1: FAILED, 0: RUNNING, 1: COMPLETED, 2: PENDING, 3: PAUSED, 4: CANCELLED",
            "example": 0
          },
          "exec_log_file_metadata_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exec Log File Metadata Id",
            "description": "The ID of the execution log file",
            "example": 1
          },
          "exec_log_file_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exec Log File Uri",
            "description": "The URI of the execution log file, which should already be presigned for read access",
            "example": "https://example.com/exec_log.txt"
          },
          "time_started": {
            "type": "string",
            "format": "date-time",
            "title": "Time Started",
            "description": "The time the workflow task started",
            "example": "2021-01-01T00:00:00Z"
          },
          "time_finished": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Finished",
            "description": "The time the workflow task finished",
            "example": "2021-01-01T00:00:00Z"
          },
          "time_created": {
            "type": "string",
            "format": "date-time",
            "title": "Time Created",
            "description": "The time the workflow task was created",
            "example": "2021-01-01T00:00:00Z"
          },
          "identifier": {
            "type": "string",
            "title": "Identifier",
            "description": "The unique identifier of the workflow task",
            "example": "John Doe"
          },
          "inputs": {
            "additionalProperties": true,
            "type": "object",
            "title": "Inputs",
            "description": "The inputs of the workflow task",
            "default": {},
            "example": {
              "document_id": "abc123",
              "user_id": 123456
            }
          },
          "task_metadata": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/WFTaskMetadataResponseSchema"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Metadata",
            "description": "The metadata of the workflow task",
            "example": [
              {
                "key": "loan_id",
                "value": "123456"
              }
            ]
          },
          "results": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/WFTaskResultsResponseSchema"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Results",
            "description": "The results of the workflow task",
            "example": [
              {
                "id": 1,
                "results": {
                  "format": "text/html",
                  "output_uri": "https://example.com/output.html"
                }
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "workflow_id",
          "workflow_name",
          "workflow_version",
          "workflow_runtime_location",
          "entry_point",
          "exec_environment",
          "exec_status",
          "time_started",
          "time_created",
          "identifier"
        ],
        "title": "WFTaskResponseSchema"
      },
      "WFTaskResultsResponseSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the workflow task",
            "example": 2
          },
          "results": {
            "additionalProperties": true,
            "type": "object",
            "title": "Results",
            "description": "The results of the workflow task",
            "example": {
              "format": "text/html",
              "output_uri": "https://example.com/output.html"
            }
          }
        },
        "type": "object",
        "required": ["id", "results"],
        "title": "WFTaskResultsResponseSchema"
      },
      "WFTaskStartRequestSchema": {
        "properties": {
          "workflow_id": {
            "type": "integer",
            "title": "Workflow Id",
            "description": "The ID of the workflow",
            "example": 1
          },
          "entry_point": {
            "$ref": "#/components/schemas/Type",
            "description": "The entry point of the workflow, 1: USER_INPUT, 2: EMAIL, 3: WEB, 4: OUTLOOK, 5: DESKTOP_APP",
            "example": 1
          },
          "inputs": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Inputs",
            "description": "The inputs of the workflow",
            "example": "{\"user_id\": 123456}"
          }
        },
        "type": "object",
        "required": ["workflow_id", "entry_point"],
        "title": "WFTaskStartRequestSchema"
      },
      "WFTaskUpdateRequestSchema": {
        "properties": {
          "exec_status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WFExecStatus"
              },
              {
                "type": "null"
              }
            ],
            "description": "The execution status of the workflow, -1: FAILED, 0: RUNNING, 1: COMPLETED, 2: PENDING, 3: PAUSED, 4: CANCELLED",
            "example": 0
          },
          "exec_log_file_metadata_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exec Log File Metadata Id",
            "description": "The ID of the execution log file",
            "example": 1
          },
          "time_finished": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Finished",
            "description": "The time the workflow task finished",
            "example": "2021-01-01T00:00:00Z"
          },
          "identifier": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Identifier",
            "description": "The unique identifier of the workflow task",
            "example": "John Doe"
          }
        },
        "type": "object",
        "title": "WFTaskUpdateRequestSchema"
      },
      "WebSearchTool": {
        "properties": {
          "type": {
            "type": "string",
            "enum": ["web_search_preview", "web_search_preview_2025_03_11"],
            "title": "Type"
          },
          "search_context_size": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["low", "medium", "high"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Search Context Size"
          },
          "user_location": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserLocation"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["type"],
        "title": "WebSearchTool"
      },
      "WebSearchToolCall": {
        "properties": {
          "type": {
            "type": "string",
            "const": "web_search_call",
            "title": "Type",
            "default": "web_search_call"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "ID of the content block"
          },
          "status": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["in_progress", "completed", "incomplete", "failed", "searching"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "Status of the content block"
          }
        },
        "type": "object",
        "required": ["id", "status"],
        "title": "WebSearchToolCall",
        "description": "Web search tool call output"
      },
      "WorkflowCreateRequestSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the workflow",
            "example": "HELOC Loan Application Review"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the workflow",
            "example": "This is a workflow for HELOC loan application review"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Status"
              },
              {
                "type": "null"
              }
            ],
            "description": "The status of the workflow, -99: REMOVED, 0: DISABLED, 1: DRAFT, 2: ENABLED",
            "default": 2,
            "example": 2
          },
          "ver": {
            "type": "string",
            "title": "Ver",
            "description": "The version of the workflow",
            "example": "1.0.0"
          },
          "full_definition_file_metadata_id": {
            "type": "integer",
            "title": "Full Definition File Metadata Id",
            "description": "The ID of the full definition file",
            "example": 1
          },
          "allowed_entry_points": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Type"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allowed Entry Points",
            "description": "The allowed entry points of the workflow, 1: USER_INPUT, 2: EMAIL",
            "example": [1]
          },
          "execution_mode": {
            "$ref": "#/components/schemas/WFExecMode",
            "description": "The execution mode of the workflow, 1: LOCAL, 2: REMOTE",
            "default": 1,
            "example": 1
          },
          "runtime_location": {
            "$ref": "#/components/schemas/RuntimeLocation",
            "description": "The runtime location of the workflow, 'desktop-app' or 'backend'",
            "default": "desktop-app",
            "example": "desktop-app"
          },
          "meta_data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Data",
            "description": "The metadata of the workflow",
            "example": "{\"user_id\": 123456}",
            "sensitivity": 3
          }
        },
        "type": "object",
        "required": ["name", "ver", "full_definition_file_metadata_id"],
        "title": "WorkflowCreateRequestSchema"
      },
      "WorkflowResponseSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the workflow",
            "example": 1
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the workflow",
            "example": "HELOC Loan Application Review"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the workflow",
            "example": "This is a workflow for HELOC loan application review"
          },
          "status": {
            "$ref": "#/components/schemas/Status",
            "description": "The status of the workflow, -99: REMOVED, 0: DISABLED, 1: DRAFT, 2: ENABLED",
            "example": 2
          },
          "ver": {
            "type": "string",
            "title": "Ver",
            "description": "The version of the workflow",
            "example": "1.0.0"
          },
          "full_definition_file_uri": {
            "type": "string",
            "title": "Full Definition File Uri",
            "description": "The URI of the full definition file, which should already be presigned for read access",
            "example": "https://example.com/workflow.json"
          },
          "full_definition_file_metadata_id": {
            "type": "integer",
            "title": "Full Definition File Metadata Id",
            "description": "The ID of the full definition file",
            "example": 1
          },
          "allowed_entry_points": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Type"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allowed Entry Points",
            "description": "The allowed entry points of the workflow, 1: USER_INPUT, 2: EMAIL",
            "example": [1]
          },
          "execution_mode": {
            "$ref": "#/components/schemas/WFExecMode",
            "description": "The execution mode of the workflow, 1: LOCAL, 2: REMOTE",
            "example": 1
          },
          "runtime_location": {
            "$ref": "#/components/schemas/RuntimeLocation",
            "description": "The runtime location of the workflow, 'desktop-app' or 'backend'",
            "example": "desktop-app"
          },
          "meta_data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Data",
            "description": "The metadata of the workflow",
            "example": "{\"user_id\": 123456}",
            "sensitivity": 3
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "status",
          "ver",
          "full_definition_file_uri",
          "full_definition_file_metadata_id",
          "allowed_entry_points",
          "execution_mode",
          "runtime_location"
        ],
        "title": "WorkflowResponseSchema"
      },
      "WorkflowUpdateRequestSchema": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the workflow",
            "example": "This is a workflow for HELOC loan application review"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Status"
              },
              {
                "type": "null"
              }
            ],
            "description": "The status of the workflow, -99: REMOVED, 0: DISABLED, 1: DRAFT, 2: ENABLED",
            "example": 2
          },
          "allowed_entry_points": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Type"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allowed Entry Points",
            "description": "The allowed entry points of the workflow, 1: USER_INPUT, 2: EMAIL",
            "example": [1]
          },
          "full_definition_file_metadata_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Definition File Metadata Id",
            "description": "The ID of the full definition file",
            "example": 1
          },
          "execution_mode": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WFExecMode"
              },
              {
                "type": "null"
              }
            ],
            "description": "The execution mode of the workflow, 1: LOCAL, 2: REMOTE",
            "example": 1
          },
          "runtime_location": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RuntimeLocation"
              },
              {
                "type": "null"
              }
            ],
            "description": "The runtime location of the workflow, 'desktop-app' or 'backend'",
            "example": "desktop-app"
          }
        },
        "type": "object",
        "title": "WorkflowUpdateRequestSchema"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/api/token"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "auth",
      "description": "Authentication and authorization operations"
    },
    {
      "name": "customers",
      "description": "Customer (tenant) related operations"
    },
    {
      "name": "users",
      "description": "User account management operations"
    },
    {
      "name": "custom",
      "description": "Customer-specific operations, availability varies by tenancy"
    },
    {
      "name": "ops",
      "description": "Internal DevOps related operations"
    },
    {
      "name": "ml_models",
      "description": "ML model operations"
    },
    {
      "name": "files",
      "description": "File operations"
    },
    {
      "name": "documents",
      "description": "Document operations"
    },
    {
      "name": "workflows",
      "description": "Workflow and related operations"
    }
  ]
}
