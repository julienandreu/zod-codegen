import { readFileSync, writeFileSync, } from 'fs';
import { Reporter } from './utils/reporter';
import { resolve } from 'path';
import { load } from 'js-yaml';
import { OpenApiSpec } from './openapi';
import ts from 'typescript';

export class Generator {
  private _target: string;
  private _printer: ts.Printer;

  constructor(
    private _name: string,
    private _version: string,
    private _reporter: Reporter,
    private _input: string,
    private _output: string,
  ) {
    this._target = resolve(this._output, 'type.ts');
    this._printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });
  }

  readFile(): unknown {
    const sourceContent = readFileSync(this._input, 'utf8');

    try {
      return JSON.parse(sourceContent);
    } catch (_) {
      return load(sourceContent);
    }
  }

  parseFile(source: unknown) {
    return OpenApiSpec.parse(source);
  }

  buildAST() {
    const importDeclaration = ts.factory.createImportDeclaration(
      undefined,
      ts.factory.createImportClause(
        false,
        ts.factory.createIdentifier('axios'),
        ts.factory.createNamedImports([
          ts.factory.createImportSpecifier(
            false,
            undefined,
            ts.factory.createIdentifier('AxiosRequestConfig')
          ),
          ts.factory.createImportSpecifier(
            false,
            undefined,
            ts.factory.createIdentifier('AxiosResponse')
          )
        ])
      ),
      ts.factory.createStringLiteral('axios'),
      undefined
    );

    const baseUrlVariableDeclaration = ts.factory.createVariableDeclaration(
      ts.factory.createIdentifier('baseUrl'),
      undefined,
      undefined,
      ts.factory.createStringLiteral('http://example.com')
    );

    const baseUrlVariableStatement = ts.factory.createVariableStatement(
      undefined,
      ts.factory.createVariableDeclarationList(
        [baseUrlVariableDeclaration],
        ts.NodeFlags.Const
      )
    );

    return [
      importDeclaration,
      baseUrlVariableStatement,
    ];
  }

  buildCode(): string {
    const file = ts.createSourceFile(
      this._target,
      '',
      ts.ScriptTarget.Latest,
      false,
      ts.ScriptKind.TS
    );

    return this._printer.printList(
      ts.ListFormat.SourceFileStatements,
      ts.factory.createNodeArray(this.buildAST()),
      file,
    );
  }

  writeFile(title: string, version: string, source: string, code: string) {
    writeFileSync(
      this._target,
      [
        '// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.',
        `// Built with ${this._name}@${this._version}`,
        `// Latest edit: ${new Date().toUTCString()}`,
        `// Source file: ${this._input}`,
        `// API: ${title} v${version}`,
        null,
        code,
        '/*',
        source,
        '*/',
      ].join('\n')
    );
  }

  run(): number {
    try {
      const rawSource = this.readFile();
      const openapi = this.parseFile(rawSource);
      const code = this.buildCode();

      this.writeFile(openapi.info.title, openapi.info.version, JSON.stringify(openapi, null, 2), code);

      return 0;
    } catch (error) {
      if (error instanceof Error) {
        this._reporter.error(error.message);
      }

      return 1;
    }
  }
}