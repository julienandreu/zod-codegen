// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Built with zod-codegen@0.1.0-alpha.1
// Latest edit: Sat, 06 Jan 2024 22:11:01 GMT
// Source file: ./samples/swagger-petstore.yaml
// API: Swagger Petstore - OpenAPI 3.0 v1.0.11

// Imports
import axios, {type AxiosResponse} from 'axios';
import z from 'zod';
import {compile} from 'path-to-regexp';

// Components schemas
export const Order = z.object({
  id: z.number().int().optional(),
  petId: z.number().int().optional(),
  quantity: z.number().int().optional(),
  shipDate: z.string().optional(),
  status: z.string().optional(),
  complete: z.boolean().optional(),
});
export const Address = z.object({
  street: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  zip: z.string().optional(),
});
export const Customer = z.object({
  id: z.number().int().optional(),
  username: z.string().optional(),
  address: z.array(Address).optional(),
});
export const Category = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
});
export const User = z.object({
  id: z.number().int().optional(),
  username: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  password: z.string().optional(),
  phone: z.string().optional(),
  userStatus: z.number().int().optional(),
});
export const Tag = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
});
export const Pet = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  category: Category,
  photoUrls: z.array(z.string()),
  tags: z.array(Tag).optional(),
  status: z.string().optional(),
});
export const ApiResponse = z.object({
  code: z.number().int().optional(),
  type: z.string().optional(),
  message: z.string().optional(),
});
export const FindPetsByStatusResponse = z.array(Pet);
export const QueryParameterStatus = z.string().optional();
export const FindPetsByTagsResponse = z.array(Pet);
export const QueryParameterTags = z.array(z.string()).optional();
export const PathParameterPetId = z.number().int();
export const QueryParameterName = z.string().optional();
export const HeaderParameterApi_key = z.string().optional();
export const QueryParameterAdditionalMetadata = z.string().optional();
export const GetInventoryResponse = z.object({});
export const PathParameterOrderId = z.number().int();
export const LoginUserResponse = z.string();
export const QueryParameterUsername = z.string().optional();
export const QueryParameterPassword = z.string().optional();
export const PathParameterUsername = z.string();

// Default base URL
const defaultBaseUrl = 'https://petstore3.swagger.io/api/v3';

// Client class
export class SwaggerPetstoreOpenAPI30 {
  readonly #baseUrl: string;
  constructor(baseUrl: string = defaultBaseUrl) {
    this.#baseUrl = baseUrl;
  }
  async #makeApiRequest<T>(
    method: string,
    path: string,
    headers: Record<PropertyKey, unknown> = {},
    params: Record<PropertyKey, unknown> = {},
    data?: unknown,
  ): Promise<AxiosResponse<T>> {
    return axios<T>({
      method,
      url: `${this.#baseUrl}${path}`,
      params,
      data,
      headers: {
        'Content-Type': 'application/json',
        ...headers,
      },
    });
  }
  async addPet(pet: z.infer<typeof Pet>): Promise<AxiosResponse<z.infer<typeof Pet>>> {
    const safeData = Pet.parse(pet);
    const response = await this.#makeApiRequest('post', '/pet', safeData);
    const safeResponseData = Pet.parse(response.data);
    return {
      ...response,
      data: safeResponseData,
    };
  }
  async updatePet(pet: z.infer<typeof Pet>): Promise<AxiosResponse<z.infer<typeof Pet>>> {
    const safeData = Pet.parse(pet);
    const response = await this.#makeApiRequest('put', '/pet', safeData);
    const safeResponseData = Pet.parse(response.data);
    return {
      ...response,
      data: safeResponseData,
    };
  }
  async findPetsByStatus(
    status?: z.infer<typeof QueryParameterStatus>,
  ): Promise<AxiosResponse<z.infer<typeof FindPetsByStatusResponse>>> {
    const response = await this.#makeApiRequest('get', '/pet/findByStatus', {status}, {});
    const safeResponseData = FindPetsByStatusResponse.parse(response.data);
    return {
      ...response,
      data: safeResponseData,
    };
  }
  async findPetsByTags(
    tags?: z.infer<typeof QueryParameterTags>,
  ): Promise<AxiosResponse<z.infer<typeof FindPetsByTagsResponse>>> {
    const response = await this.#makeApiRequest('get', '/pet/findByTags', {tags}, {});
    const safeResponseData = FindPetsByTagsResponse.parse(response.data);
    return {
      ...response,
      data: safeResponseData,
    };
  }
  async getPetById(petId: z.infer<typeof PathParameterPetId>): Promise<AxiosResponse<z.infer<typeof Pet>>> {
    const response = await this.#makeApiRequest(
      'get',
      compile('/pet/{petId}')({
        petId,
      }),
      {},
      {},
    );
    const safeResponseData = Pet.parse(response.data);
    return {
      ...response,
      data: safeResponseData,
    };
  }
  async updatePetWithForm(
    petId: z.infer<typeof PathParameterPetId>,
    name?: z.infer<typeof QueryParameterName>,
    status?: z.infer<typeof QueryParameterStatus>,
  ) {
    const response = await this.#makeApiRequest(
      'post',
      compile('/pet/{petId}')({
        petId,
      }),
      {name, status},
      {},
    );
    return response;
  }
  async deletePet(petId: z.infer<typeof PathParameterPetId>, api_key?: z.infer<typeof HeaderParameterApi_key>) {
    const response = await this.#makeApiRequest(
      'delete',
      compile('/pet/{petId}')({
        petId,
      }),
      {},
      {api_key},
    );
    return response;
  }
  async uploadFile(
    petId: z.infer<typeof PathParameterPetId>,
    additionalMetadata?: z.infer<typeof QueryParameterAdditionalMetadata>,
  ): Promise<AxiosResponse<z.infer<typeof ApiResponse>>> {
    const response = await this.#makeApiRequest(
      'post',
      compile('/pet/{petId}/uploadImage')({
        petId,
      }),
      {additionalMetadata},
      {},
    );
    const safeResponseData = ApiResponse.parse(response.data);
    return {
      ...response,
      data: safeResponseData,
    };
  }
  async getInventory(): Promise<AxiosResponse<z.infer<typeof GetInventoryResponse>>> {
    const response = await this.#makeApiRequest('get', '/store/inventory');
    const safeResponseData = GetInventoryResponse.parse(response.data);
    return {
      ...response,
      data: safeResponseData,
    };
  }
  async placeOrder(order: z.infer<typeof Order>): Promise<AxiosResponse<z.infer<typeof Order>>> {
    const safeData = Order.parse(order);
    const response = await this.#makeApiRequest('post', '/store/order', safeData);
    const safeResponseData = Order.parse(response.data);
    return {
      ...response,
      data: safeResponseData,
    };
  }
  async getOrderById(orderId: z.infer<typeof PathParameterOrderId>): Promise<AxiosResponse<z.infer<typeof Order>>> {
    const response = await this.#makeApiRequest(
      'get',
      compile('/store/order/{orderId}')({
        orderId,
      }),
      {},
      {},
    );
    const safeResponseData = Order.parse(response.data);
    return {
      ...response,
      data: safeResponseData,
    };
  }
  async deleteOrder(orderId: z.infer<typeof PathParameterOrderId>) {
    const response = await this.#makeApiRequest(
      'delete',
      compile('/store/order/{orderId}')({
        orderId,
      }),
      {},
      {},
    );
    return response;
  }
  async createUser(user: z.infer<typeof User>) {
    const safeData = User.parse(user);
    const response = await this.#makeApiRequest('post', '/user', safeData);
    return response;
  }
  async createUsersWithListInput(): Promise<AxiosResponse<z.infer<typeof User>>> {
    const response = await this.#makeApiRequest('post', '/user/createWithList');
    const safeResponseData = User.parse(response.data);
    return {
      ...response,
      data: safeResponseData,
    };
  }
  async loginUser(
    username?: z.infer<typeof QueryParameterUsername>,
    password?: z.infer<typeof QueryParameterPassword>,
  ): Promise<AxiosResponse<z.infer<typeof LoginUserResponse>>> {
    const response = await this.#makeApiRequest('get', '/user/login', {username, password}, {});
    const safeResponseData = LoginUserResponse.parse(response.data);
    return {
      ...response,
      data: safeResponseData,
    };
  }
  async logoutUser() {
    const response = await this.#makeApiRequest('get', '/user/logout', {}, {});
    return response;
  }
  async getUserByName(username: z.infer<typeof PathParameterUsername>): Promise<AxiosResponse<z.infer<typeof User>>> {
    const response = await this.#makeApiRequest(
      'get',
      compile('/user/{username}')({
        username,
      }),
      {},
      {},
    );
    const safeResponseData = User.parse(response.data);
    return {
      ...response,
      data: safeResponseData,
    };
  }
  async updateUser(username: z.infer<typeof PathParameterUsername>, user: z.infer<typeof User>) {
    const safeData = User.parse(user);
    const response = await this.#makeApiRequest(
      'put',
      compile('/user/{username}')({
        username,
      }),
      {},
      {},
      safeData,
    );
    return response;
  }
  async deleteUser(username: z.infer<typeof PathParameterUsername>) {
    const response = await this.#makeApiRequest(
      'delete',
      compile('/user/{username}')({
        username,
      }),
      {},
      {},
    );
    return response;
  }
}
