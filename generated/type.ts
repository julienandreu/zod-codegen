// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Built with zod-codegen@0.1.0-alpha.1
// Latest edit: Mon, 15 Sep 2025 14:42:37 GMT
// Source file: ./samples/saris-openapi.json
/* eslint-disable */
// @ts-nocheck


// Imports
;
import z from 'zod';
import { compile } from 'path-to-regexp';

// Components schemas
;
export const AccessLevel = z.number().int();
export const ActionClick = z.object({
    button: z.string(),
    type: z.string(),
    x: z.number().int(),
    y: z.number().int()
});
export const ActionDoubleClick = z.object({
    type: z.string(),
    x: z.number().int(),
    y: z.number().int()
});
export const ActionDragPath = z.object({
    x: z.number().int(),
    y: z.number().int()
});
export const ActionDrag = z.object({
    path: z.array(ActionDragPath),
    type: z.string()
});
export const ActionFind = z.object({
    pattern: z.string(),
    type: z.string(),
    url: z.string()
});
export const ActionKeypress = z.object({
    keys: z.array(z.string()),
    type: z.string()
});
export const ActionMove = z.object({
    type: z.string(),
    x: z.number().int(),
    y: z.number().int()
});
export const ActionOpenPage = z.object({
    type: z.string(),
    url: z.string()
});
export const ActionScreenshot = z.object({
    type: z.string()
});
export const ActionScroll = z.object({
    scroll_x: z.number().int(),
    scroll_y: z.number().int(),
    type: z.string(),
    x: z.number().int(),
    y: z.number().int()
});
export const ActionSearchSource = z.object({
    type: z.string(),
    url: z.string()
});
export const ActionSearch = z.object({
    query: z.string(),
    type: z.string(),
    sources: z.union([z.array(ActionSearchSource), z.unknown()]).optional()
});
export const ActionType = z.object({
    text: z.string(),
    type: z.string()
});
export const ActionWait = z.object({
    type: z.string()
});
export const AdminCreateUserSchema = z.object({
    email: z.string(),
    name: z.string(),
    password: z.string(),
    phone_number: z.union([z.string(), z.unknown()]).optional()
});
export const AnnotationContainerFileCitation = z.object({
    container_id: z.string(),
    end_index: z.number().int(),
    file_id: z.string(),
    filename: z.string(),
    start_index: z.number().int(),
    type: z.string()
});
export const AnnotationFileCitation = z.object({
    file_id: z.string(),
    filename: z.string(),
    index: z.number().int(),
    type: z.string()
});
export const AnnotationFilePath = z.object({
    file_id: z.string(),
    index: z.number().int(),
    type: z.string()
});
export const AnnotationURLCitation = z.object({
    end_index: z.number().int(),
    start_index: z.number().int(),
    title: z.string(),
    type: z.string(),
    url: z.string()
});
export const AppValidationTokenSchema = z.object({
    app_validation_token: z.string(),
    token_type: z.string()
});
export const Body_create_token_api_token_post = z.object({
    grant_type: z.union([z.string(), z.unknown()]).optional(),
    username: z.string(),
    password: z.string(),
    scope: z.string().optional(),
    client_id: z.union([z.string(), z.unknown()]).optional(),
    client_secret: z.union([z.string(), z.unknown()]).optional()
});
export const ComparisonFilter = z.object({
    key: z.string(),
    type: z.string(),
    value: z.union([z.string(), z.number(), z.boolean()])
});
export const CompoundFilter = z.object({
    filters: z.array(z.union([ComparisonFilter, z.unknown()])),
    type: z.string()
});
export const ComputerTool = z.object({
    display_height: z.number().int(),
    display_width: z.number().int(),
    environment: z.string(),
    type: z.string()
});
export const ComputerToolCall = z.object({
    type: z.string().optional(),
    id: z.string(),
    status: z.union([z.string(), z.unknown()]),
    action: z.object({}),
    call_id: z.string(),
    pending_safety_checks: z.union([z.array(z.string()), z.unknown()]).optional()
});
export const Content = z.object({
    text: z.string(),
    type: z.string()
});
export const Purpose = z.number().int();
export const RelatedObjectType = z.number().int();
export const CreateFileMetadataRequestSchema = z.object({
    file_name: z.string(),
    file_size: z.number(),
    bucket_name: z.string(),
    object_key: z.string(),
    etag: z.string(),
    purpose: Purpose,
    wf_task_id: z.union([z.number().int(), z.unknown()]).optional(),
    related_object_type: RelatedObjectType,
    related_object_id: z.number().int().optional(),
    extra_data: z.union([z.object({}), z.unknown()]).optional()
});
export const CreatePresignedPostFieldsResponse = z.object({
    key: z.string(),
    AWSAccessKeyId: z.string(),
    policy: z.string(),
    signature: z.string()
});
export const CustomerSchema = z.object({
    id: z.number().int(),
    name: z.string(),
    email_domain: z.string()
});
export const DocumentPreprocessResponseSchema = z.object({
    message: z.string()
});
export const ErrorDetails = z.object({
    code: z.string(),
    message: z.string()
});
export const FileMetadataResponseSchema = z.object({
    id: z.number().int(),
    file_name: z.string(),
    file_size: z.number(),
    bucket_name: z.string(),
    object_key: z.string(),
    etag: z.string(),
    purpose: Purpose,
    extra_data: z.object({}),
    time_created: z.string()
});
export const RankingOptions = z.object({
    ranker: z.union([z.string(), z.unknown()]).optional(),
    score_threshold: z.union([z.number(), z.unknown()]).optional()
});
export const FileSearchTool_Input = z.object({
    type: z.string(),
    vector_store_ids: z.array(z.string()),
    filters: z.union([ComparisonFilter, CompoundFilter, z.unknown()]).optional(),
    max_num_results: z.union([z.number().int(), z.unknown()]).optional(),
    ranking_options: z.union([RankingOptions, z.unknown()]).optional()
});
export const FileSearchTool_Output = z.object({
    type: z.string(),
    vector_store_ids: z.array(z.string()),
    filters: z.union([ComparisonFilter, CompoundFilter, z.unknown()]).optional(),
    max_num_results: z.union([z.number().int(), z.unknown()]).optional(),
    ranking_options: z.union([RankingOptions, z.unknown()]).optional()
});
export const FileSearchToolCall = z.object({
    type: z.string().optional(),
    id: z.string(),
    status: z.union([z.string(), z.unknown()]),
    queries: z.array(z.string()),
    results: z.union([z.array(z.unknown()), z.unknown()]).optional()
});
export const FunctionTool = z.object({
    name: z.string(),
    parameters: z.union([z.object({}), z.unknown()]).optional(),
    strict: z.union([z.boolean(), z.unknown()]).optional(),
    type: z.string(),
    description: z.union([z.string(), z.unknown()]).optional()
});
export const FunctionToolCall = z.object({
    type: z.string().optional(),
    id: z.string(),
    status: z.union([z.string(), z.unknown()]),
    name: z.string(),
    arguments: z.string(),
    call_id: z.string()
});
export const GenerateSignedUrl = z.object({
    uri: z.string(),
    signed_url: z.string()
});
export const GenerateSignedUrlRequestSchema = z.object({
    uris: z.array(z.string()).optional()
});
export const GenerateSignedUrlResponseSchema = z.object({
    signed_urls: z.array(GenerateSignedUrl).optional()
});
export const TargetS3Object = z.object({
    uri: z.string(),
    bucket_name: z.string(),
    object_key: z.string()
});
export const UploadToS3Request = z.object({
    url: z.string(),
    fields: CreatePresignedPostFieldsResponse
});
export const GenerateUploadUrl = z.object({
    source_name: z.string(),
    s3_object: TargetS3Object,
    upload_request: UploadToS3Request
});
export const GenerateUploadUrlRequestSchema = z.object({
    files: z.array(z.string()).optional()
});
export const GenerateUploadUrlResponseSchema = z.object({
    upload_urls: z.array(GenerateUploadUrl).optional()
});
export const ValidationError = z.object({
    loc: z.array(z.union([z.string(), z.number().int()])),
    msg: z.string(),
    type: z.string()
});
export const HTTPValidationError = z.object({
    detail: z.array(ValidationError).optional()
});
export const HealthCheckResult = z.object({
    message: z.string()
});
export const IDExtractRequestSchema = z.object({
    s3_uri: z.string(),
    wf_task_id: z.union([z.number().int(), z.unknown()]).optional()
});
export const IDExtractResponseSchema = z.object({
    identity_documents: z.object({})
});
export const ImageInput = z.object({
    type: z.string().optional(),
    detail: z.string().optional(),
    file_id: z.union([z.string(), z.unknown()]).optional(),
    image_url: z.string()
});
export const IncompleteDetails = z.object({
    reason: z.string()
});
export const InputTokensDetails = z.object({
    cached_tokens: z.number().int()
});
export const JSONObjectFormatConfig = z.object({
    type: z.string().optional()
});
export const JSONSchemaFormatConfig = z.object({
    type: z.string().optional(),
    name: z.union([z.string(), z.unknown()]).optional(),
    schema: z.object({}).optional()
});
export const LogprobTopLogprob = z.object({
    token: z.string(),
    bytes: z.array(z.number().int()),
    logprob: z.number()
});
export const Logprob = z.object({
    token: z.string(),
    bytes: z.array(z.number().int()),
    logprob: z.number(),
    top_logprobs: z.array(LogprobTopLogprob)
});
export const MFAActivateResponseSchema = z.object({
    device_identifier: z.string(),
    message: z.string()
});
export const MFASetupResponseSchema = z.object({
    provisioning_uri: z.string()
});
export const MLFoundationModelSchema = z.object({
    id: z.number().int(),
    name: z.string(),
    provider: z.string(),
    config: z.union([z.object({}), z.unknown()]).optional()
});
export const MetadataExtractRequestSchema = z.object({
    content: z.string()
});
export const MetadataTag = z.object({
    key: z.string(),
    value: z.string()
});
export const OutputTokensDetails = z.object({
    reasoning_tokens: z.number().int()
});
export const PaginationMetaSchema = z.object({
    limit: z.number().int(),
    count: z.number().int().optional(),
    total: z.union([z.number().int(), z.unknown()]).optional(),
    sort: z.union([z.array(z.object({})), z.unknown()]).optional(),
    after: z.union([z.string(), z.unknown()]).optional(),
    before: z.union([z.string(), z.unknown()]).optional(),
    has_next: z.boolean().optional(),
    has_prev: z.boolean().optional()
});
export const PendingSafetyCheck = z.object({
    id: z.string(),
    code: z.string(),
    message: z.string()
});
export const Reasoning = z.object({
    type: z.string().optional(),
    id: z.string(),
    status: z.union([z.string(), z.unknown()]),
    summary: z.array(z.string())
});
export const RequestType = z.number().int();
export const ResponseComputerToolCall = z.object({
    id: z.string(),
    action: z.union([ActionClick, ActionDoubleClick, ActionDrag, ActionKeypress, ActionMove, ActionScreenshot, ActionScroll, ActionType, ActionWait]),
    call_id: z.string(),
    pending_safety_checks: z.array(PendingSafetyCheck),
    status: z.string(),
    type: z.string()
});
export const Result = z.object({
    attributes: z.union([z.object({}), z.unknown()]).optional(),
    file_id: z.union([z.string(), z.unknown()]).optional(),
    filename: z.union([z.string(), z.unknown()]).optional(),
    score: z.union([z.number(), z.unknown()]).optional(),
    text: z.union([z.string(), z.unknown()]).optional()
});
export const ResponseFileSearchToolCall = z.object({
    id: z.string(),
    queries: z.array(z.string()),
    status: z.string(),
    type: z.string(),
    results: z.union([z.array(Result), z.unknown()]).optional()
});
export const ResponseFunctionToolCall = z.object({
    arguments: z.string(),
    call_id: z.string(),
    name: z.string(),
    type: z.string(),
    id: z.union([z.string(), z.unknown()]).optional(),
    status: z.union([z.string(), z.unknown()]).optional()
});
export const ResponseFunctionWebSearch = z.object({
    id: z.string(),
    action: z.union([ActionSearch, ActionOpenPage, ActionFind]),
    status: z.string(),
    type: z.string()
});
export const ResponseOutputText = z.object({
    annotations: z.array(z.union([AnnotationFileCitation, AnnotationURLCitation, AnnotationContainerFileCitation, AnnotationFilePath])),
    text: z.string(),
    type: z.string(),
    logprobs: z.union([z.array(Logprob), z.unknown()]).optional()
});
export const ResponseOutputRefusal = z.object({
    refusal: z.string(),
    type: z.string()
});
export const ResponseOutputMessage = z.object({
    id: z.string(),
    content: z.array(z.union([ResponseOutputText, ResponseOutputRefusal])),
    role: z.string(),
    status: z.string(),
    type: z.string()
});
export const Summary = z.object({
    text: z.string(),
    type: z.string()
});
export const ResponseReasoningItem = z.object({
    id: z.string(),
    summary: z.array(Summary),
    type: z.string(),
    content: z.union([z.array(Content), z.unknown()]).optional(),
    encrypted_content: z.union([z.string(), z.unknown()]).optional(),
    status: z.union([z.string(), z.unknown()]).optional()
});
export const ResponseSchema_DocumentPreprocessResponseSchema_PaginationMetaSchema_ = z.object({
    data: DocumentPreprocessResponseSchema,
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_FileMetadataResponseSchema_PaginationMetaSchema_ = z.object({
    data: FileMetadataResponseSchema,
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_GenerateSignedUrlResponseSchema_PaginationMetaSchema_ = z.object({
    data: GenerateSignedUrlResponseSchema,
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_GenerateUploadUrlResponseSchema_PaginationMetaSchema_ = z.object({
    data: GenerateUploadUrlResponseSchema,
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_HealthCheckResult_PaginationMetaSchema_ = z.object({
    data: HealthCheckResult,
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_IDExtractResponseSchema_PaginationMetaSchema_ = z.object({
    data: IDExtractResponseSchema,
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_List_MetadataTag__PaginationMetaSchema_ = z.object({
    data: z.array(MetadataTag),
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_MFAActivateResponseSchema_PaginationMetaSchema_ = z.object({
    data: MFAActivateResponseSchema,
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_MFASetupResponseSchema_PaginationMetaSchema_ = z.object({
    data: MFASetupResponseSchema,
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_MLFoundationModelSchema_PaginationMetaSchema_ = z.object({
    data: MLFoundationModelSchema,
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_NoneType_PaginationMetaSchema_ = z.object({
    data: z.unknown(),
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseUsage = z.object({
    input_tokens: z.number().int(),
    input_tokens_details: InputTokensDetails,
    output_tokens: z.number().int(),
    output_tokens_details: OutputTokensDetails,
    total_tokens: z.number().int()
});
export const UserLocation = z.object({
    type: z.string(),
    city: z.union([z.string(), z.unknown()]).optional(),
    country: z.union([z.string(), z.unknown()]).optional(),
    region: z.union([z.string(), z.unknown()]).optional(),
    timezone: z.union([z.string(), z.unknown()]).optional()
});
export const WebSearchTool = z.object({
    type: z.string(),
    search_context_size: z.union([z.string(), z.unknown()]).optional(),
    user_location: z.union([UserLocation, z.unknown()]).optional()
});
export const ToolChoiceTypes = z.object({
    type: z.string()
});
export const ToolChoiceFunction = z.object({
    name: z.string(),
    type: z.string()
});
export const SarisLLMInferenceResponseSchema = z.object({
    id: z.string(),
    object: z.string().optional(),
    created_at: z.number().int(),
    model: z.string(),
    status: z.string(),
    output: z.array(z.union([ResponseOutputMessage, ResponseFileSearchToolCall, ResponseFunctionToolCall, ResponseFunctionWebSearch, ResponseComputerToolCall, ResponseReasoningItem])),
    output_text: z.union([z.string(), z.unknown()]).optional(),
    error: z.union([ErrorDetails, z.unknown()]).optional(),
    incomplete_details: z.union([IncompleteDetails, z.unknown()]).optional(),
    usage: ResponseUsage,
    service_tier: z.union([z.string(), z.unknown()]).optional(),
    user: z.union([z.string(), z.unknown()]).optional(),
    truncation: z.union([z.string(), z.unknown()]).optional(),
    top_p: z.union([z.number(), z.unknown()]).optional(),
    tools: z.union([z.array(z.union([FileSearchTool_Output, FunctionTool, ComputerTool, WebSearchTool])), z.unknown()]).optional(),
    tool_choice: z.union([z.string(), ToolChoiceTypes, ToolChoiceFunction, z.unknown()]).optional(),
    text: z.union([z.object({}), z.unknown()]).optional(),
    temperature: z.union([z.number(), z.unknown()]).optional(),
    instructions: z.union([z.string(), z.unknown()]).optional(),
    max_output_tokens: z.union([z.number().int(), z.unknown()]).optional(),
    parallel_tool_calls: z.union([z.boolean(), z.unknown()]).optional(),
    previous_response_id: z.union([z.string(), z.unknown()]).optional()
});
export const ResponseSchema_SarisLLMInferenceResponseSchema_PaginationMetaSchema_ = z.object({
    data: SarisLLMInferenceResponseSchema,
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const SelfUserResponseSchema = z.object({
    id: z.number().int(),
    email: z.string(),
    name: z.string(),
    force_reset_password: z.boolean().optional()
});
export const ResponseSchema_SelfUserResponseSchema_PaginationMetaSchema_ = z.object({
    data: SelfUserResponseSchema,
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_Sequence_MLFoundationModelSchema__PaginationMetaSchema_ = z.object({
    data: z.array(MLFoundationModelSchema),
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const WFTaskMetadataResponseSchema = z.object({
    key: z.string(),
    value: z.string(),
    time_created: z.string()
});
export const ResponseSchema_Sequence_WFTaskMetadataResponseSchema__PaginationMetaSchema_ = z.object({
    data: z.array(WFTaskMetadataResponseSchema),
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const SignatureExtractResponseSchema = z.object({
    signatures: z.object({})
});
export const ResponseSchema_SignatureExtractResponseSchema_PaginationMetaSchema_ = z.object({
    data: SignatureExtractResponseSchema,
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_Union_AppValidationTokenSchema__Sequence_AppValidationTokenSchema___PaginationMetaSchema_ = z.object({
    data: z.union([AppValidationTokenSchema, z.array(AppValidationTokenSchema)]),
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_Union_CustomerSchema__Sequence_CustomerSchema___PaginationMetaSchema_ = z.object({
    data: z.union([CustomerSchema, z.array(CustomerSchema)]),
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const Type = z.number().int();
export const UILocationResponseSchema = z.object({
    id: z.number().int(),
    type: Type,
    source: z.array(z.string()),
    metadata_extract_config: z.object({}).optional(),
    time_created: z.string()
});
export const ResponseSchema_Union_UILocationResponseSchema__Sequence_UILocationResponseSchema___PaginationMetaSchema_ = z.object({
    data: z.union([UILocationResponseSchema, z.array(UILocationResponseSchema)]),
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const UserResponseSchema = z.object({
    id: z.number().int(),
    email: z.string(),
    name: z.string()
});
export const ResponseSchema_Union_UserResponseSchema__Sequence_UserResponseSchema___PaginationMetaSchema_ = z.object({
    data: z.union([UserResponseSchema, z.array(UserResponseSchema)]),
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const RuntimeLocation = z.string();
export const WFExecEnvironment = z.number().int();
export const WFExecStatus = z.number().int();
export const WFTaskResultsResponseSchema = z.object({
    id: z.number().int(),
    results: z.object({})
});
export const WFTaskResponseSchema = z.object({
    id: z.number().int(),
    workflow_id: z.number().int(),
    workflow_name: z.string(),
    workflow_version: z.string(),
    workflow_runtime_location: RuntimeLocation,
    entry_point: Type,
    exec_environment: WFExecEnvironment,
    exec_status: WFExecStatus,
    exec_log_file_metadata_id: z.union([z.number().int(), z.unknown()]).optional(),
    exec_log_file_uri: z.union([z.string(), z.unknown()]).optional(),
    time_started: z.string(),
    time_finished: z.union([z.string(), z.unknown()]).optional(),
    time_created: z.string(),
    identifier: z.string(),
    task_metadata: z.union([z.array(WFTaskMetadataResponseSchema), z.unknown()]).optional(),
    results: z.union([z.array(WFTaskResultsResponseSchema), z.unknown()]).optional()
});
export const ResponseSchema_Union_WFTaskResponseSchema__Sequence_WFTaskResponseSchema___PaginationMetaSchema_ = z.object({
    data: z.union([WFTaskResponseSchema, z.array(WFTaskResponseSchema)]),
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_Union_WFTaskResultsResponseSchema__Sequence_WFTaskResultsResponseSchema___PaginationMetaSchema_ = z.object({
    data: z.union([WFTaskResultsResponseSchema, z.array(WFTaskResultsResponseSchema)]),
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const Status = z.number().int();
export const WFExecMode = z.number().int();
export const WorkflowResponseSchema = z.object({
    id: z.number().int(),
    name: z.string(),
    description: z.union([z.string(), z.unknown()]).optional(),
    status: Status,
    ver: z.string(),
    full_definition_file_uri: z.string(),
    full_definition_file_metadata_id: z.number().int(),
    allowed_entry_points: z.union([z.array(Type), z.unknown()]),
    execution_mode: WFExecMode,
    runtime_location: RuntimeLocation,
    meta_data: z.union([z.object({}), z.unknown()]).optional()
});
export const ResponseSchema_Union_WorkflowResponseSchema__Sequence_WorkflowResponseSchema___PaginationMetaSchema_ = z.object({
    data: z.union([WorkflowResponseSchema, z.array(WorkflowResponseSchema)]),
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_UserResponseSchema_PaginationMetaSchema_ = z.object({
    data: UserResponseSchema,
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const ResponseSchema_WFTaskResponseSchema_PaginationMetaSchema_ = z.object({
    data: WFTaskResponseSchema,
    meta: z.union([PaginationMetaSchema, z.unknown()]).optional()
});
export const SarisFileInput = z.object({
    type: z.string().optional(),
    filename: z.string()
});
export const TextInput = z.object({
    type: z.string().optional(),
    text: z.string()
});
export const WebSearchToolCall = z.object({
    type: z.string().optional(),
    id: z.string(),
    status: z.union([z.string(), z.unknown()])
});
export const SarisInputMessage = z.object({
    role: z.string(),
    content: z.union([z.string(), z.array(z.union([TextInput, ImageInput, SarisFileInput, FileSearchToolCall, FunctionToolCall, WebSearchToolCall, ComputerToolCall, Reasoning]))]),
    type: z.union([z.string(), z.unknown()]).optional()
});
export const TextFormatConfig = z.object({
    type: z.string().optional()
});
export const TextConfig = z.object({
    format: z.union([TextFormatConfig, JSONSchemaFormatConfig, JSONObjectFormatConfig]).optional()
});
export const SarisLLMInferenceRequestSchema = z.object({
    input: z.union([z.string(), z.array(SarisInputMessage)]),
    model: z.union([z.string(), z.unknown()]).optional(),
    include: z.union([z.array(z.string()), z.unknown()]).optional(),
    instructions: z.union([z.string(), z.unknown()]).optional(),
    max_output_tokens: z.union([z.number().int(), z.unknown()]).optional(),
    metadata: z.union([z.object({}), z.unknown()]).optional(),
    parallel_tool_calls: z.union([z.boolean(), z.unknown()]).optional(),
    previous_response_id: z.union([z.string(), z.unknown()]).optional(),
    reasoning: z.union([z.object({}), z.unknown()]).optional(),
    store: z.union([z.boolean(), z.unknown()]).optional(),
    stream: z.union([z.boolean(), z.unknown()]).optional(),
    temperature: z.union([z.number(), z.unknown()]).optional(),
    text: z.union([TextConfig, z.unknown()]).optional(),
    tools: z.union([z.array(z.union([FileSearchTool_Input, FunctionTool, ComputerTool, WebSearchTool])), z.unknown()]).optional(),
    tool_choice: z.union([z.string(), ToolChoiceTypes, ToolChoiceFunction, z.unknown()]).optional(),
    top_p: z.union([z.number(), z.unknown()]).optional(),
    truncation: z.union([z.string(), z.unknown()]).optional(),
    user: z.union([z.string(), z.unknown()]).optional(),
    request_type: RequestType,
    customer_id: z.union([z.number().int(), z.unknown()]).optional(),
    wf_task_id: z.union([z.number().int(), z.unknown()]).optional()
});
export const SelfUpdateUserSchema = z.object({
    name: z.union([z.string(), z.unknown()]).optional(),
    old_password: z.union([z.string(), z.unknown()]).optional(),
    new_password: z.union([z.string(), z.unknown()]).optional(),
    phone_number: z.union([z.string(), z.unknown()]).optional()
});
export const SetPasswordWithTokenSchema = z.object({
    token: z.string(),
    new_password: z.string(),
    mfa_challenge: z.union([z.string(), z.unknown()]).optional()
});
export const SignatureExtractRequestSchema = z.object({
    s3_uri: z.string(),
    wf_task_id: z.union([z.number().int(), z.unknown()]).optional()
});
export const TokenSchema = z.object({
    access_token: z.string(),
    token_type: z.string()
});
export const TokenUpgradeBodySchema = z.object({
    mfa_challenge: z.string()
});
export const UserType = z.number().int();
export const WFTaskCreateRequestSchema = z.object({
    wf_task_id: z.union([z.number().int(), z.unknown()]).optional(),
    workflow_id: z.number().int(),
    entry_point: Type,
    exec_environment: WFExecEnvironment,
    exec_status: WFExecStatus,
    exec_log_file_metadata_id: z.union([z.number().int(), z.unknown()]).optional(),
    time_started: z.string(),
    time_finished: z.union([z.string(), z.unknown()]).optional()
});
export const WFTaskMetadataUpdateRequestSchema = z.object({
    key: z.string(),
    value: z.string()
});
export const WFTaskStartRequestSchema = z.object({
    workflow_id: z.number().int(),
    entry_point: Type
});
export const WFTaskUpdateRequestSchema = z.object({
    exec_status: z.union([WFExecStatus, z.unknown()]).optional(),
    exec_log_file_metadata_id: z.union([z.number().int(), z.unknown()]).optional(),
    time_finished: z.union([z.string(), z.unknown()]).optional(),
    identifier: z.union([z.string(), z.unknown()]).optional()
});
export const WorkflowCreateRequestSchema = z.object({
    name: z.string(),
    description: z.union([z.string(), z.unknown()]).optional(),
    status: z.union([Status, z.unknown()]).optional(),
    ver: z.string(),
    full_definition_file_metadata_id: z.number().int(),
    allowed_entry_points: z.union([z.array(Type), z.unknown()]).optional(),
    execution_mode: WFExecMode,
    runtime_location: RuntimeLocation,
    meta_data: z.union([z.object({}), z.unknown()]).optional()
});
export const WorkflowUpdateRequestSchema = z.object({
    description: z.union([z.string(), z.unknown()]).optional(),
    status: z.union([Status, z.unknown()]).optional(),
    allowed_entry_points: z.union([z.array(Type), z.unknown()]).optional(),
    full_definition_file_metadata_id: z.union([z.number().int(), z.unknown()]).optional(),
    execution_mode: z.union([WFExecMode, z.unknown()]).optional(),
    runtime_location: z.union([RuntimeLocation, z.unknown()]).optional()
});

// Client class
;
export class SarisAPIStaging {
    readonly #baseUrl: string;
    constructor(baseUrl: string = defaultBaseUrl, _?: unknown) {
        this.#baseUrl = baseUrl;
    }
    async #makeRequest<T>(method: string, path: string, options?: unknown = {}): Promise<T> {
        const url = `${this.#baseUrl}${path}`;
        const response = await fetch(url, {
            method,
            headers: {
                'Content-Type': 'application/json'
            }
        });
        if (!response.ok)
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        return await response.json();
    }
    async create_token_api_token_post(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/token');
    }
    async upgrade_token_api_token_put(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('PUT', '/api/token');
    }
    async logout_api_token_logout_post(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/token/logout');
    }
    async register_mfa_device_api_mfa_device_post(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/mfa-device');
    }
    async activate_mfa_device_api_mfa_device_activate__device_identifier__put(device_identifier: string, _?: unknown): Promise<unknown> {
        return await this.#makeRequest('PUT', '/api/mfa-device/activate/{device_identifier}');
    }
    async create_app_validation_token_api_app_validation_token_post(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/app_validation_token');
    }
    async validate_app_validation_token_api_app_validation_token_validate_get(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('GET', '/api/app_validation_token/validate');
    }
    async get_customers_api_customers_get(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('GET', '/api/customers');
    }
    async health_check_api_hc_get(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('GET', '/api/hc');
    }
    async get_users_api_users_get(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('GET', '/api/users');
    }
    async invite_user_api_users_post(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/users');
    }
    async get_self_api_users_self_get(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('GET', '/api/users/self');
    }
    async self_update_user_api_users_self_put(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('PUT', '/api/users/self');
    }
    async self_verify_user_api_users_self_verify_put(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('PUT', '/api/users/self/verify');
    }
    async update_user_api_users__user_id__put(user_id: string, _?: unknown): Promise<unknown> {
        return await this.#makeRequest('PUT', '/api/users/{user_id}');
    }
    async reset_password_api_users_reset_password_post(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/users/reset-password');
    }
    async set_password_api_users_set_password_put(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('PUT', '/api/users/set-password');
    }
    async list_ml_models_api_ml_models_get(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('GET', '/api/ml_models');
    }
    async get_model_by_id_api_ml_models__model_id__get(model_id: string, _?: unknown): Promise<unknown> {
        return await this.#makeRequest('GET', '/api/ml_models/{model_id}');
    }
    async generate_response_api_ml_models__model_id__generate_post(model_id: string, _?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/ml_models/{model_id}/generate');
    }
    async create_file_metadata_api_files_post(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/files');
    }
    async create_get_urls_api_files_presign_get_urls_post(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/files/presign-get-urls');
    }
    async create_upload_urls_api_files_presign_post_urls_post(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/files/presign-post-urls');
    }
    async preprocess_api_documents_preprocess_post(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/documents/preprocess');
    }
    async signature_extract_api_documents_signature_extract_post(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/documents/signature-extract');
    }
    async id_extract_api_documents_id_extract_post(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/documents/id-extract');
    }
    async get_workflows_api_workflows_get(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('GET', '/api/workflows');
    }
    async create_workflow_api_workflows_post(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/workflows');
    }
    async get_ui_locations_api_workflows_ui_location_get(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('GET', '/api/workflows/ui-location');
    }
    async extract_metadata_api_workflows_ui_location__ui_location_id__extract_post(ui_location_id: string, _?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/workflows/ui-location/{ui_location_id}/extract');
    }
    async update_workflow_api_workflows__workflow_id__put(workflow_id: string, _?: unknown): Promise<unknown> {
        return await this.#makeRequest('PUT', '/api/workflows/{workflow_id}');
    }
    async promote_workflow_api_workflows__workflow_id__promote_patch(workflow_id: string, _?: unknown): Promise<unknown> {
        return await this.#makeRequest('PATCH', '/api/workflows/{workflow_id}/promote');
    }
    async get_wf_tasks_api_wf_tasks_get(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('GET', '/api/wf_tasks');
    }
    async create_wf_task_api_wf_tasks_post(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/wf_tasks');
    }
    async update_wf_task_api_wf_tasks__wf_task_id__put(wf_task_id: string, _?: unknown): Promise<unknown> {
        return await this.#makeRequest('PUT', '/api/wf_tasks/{wf_task_id}');
    }
    async get_wf_task_results_api_wf_tasks__wf_task_id__results_get(wf_task_id: string, _?: unknown): Promise<unknown> {
        return await this.#makeRequest('GET', '/api/wf_tasks/{wf_task_id}/results');
    }
    async update_wf_task_metadata_api_wf_tasks__wf_task_id__metadata_put(wf_task_id: string, _?: unknown): Promise<unknown> {
        return await this.#makeRequest('PUT', '/api/wf_tasks/{wf_task_id}/metadata');
    }
    async start_wf_task_api_wf_tasks_start_post(_?: unknown): Promise<unknown> {
        return await this.#makeRequest('POST', '/api/wf_tasks/start');
    }
}
